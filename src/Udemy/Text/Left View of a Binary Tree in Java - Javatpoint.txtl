Left View of a Binary Tree in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Training Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Left View of a Binary Tree in Java In this section, we will learn about the left view of a binary tree in Java with different approaches to achieve it. In the left view of a binary tree, we print only those nodes of the binary tree that are visible when the binary tree is viewed from the left. Foe example, consider the following binary tree. The left view for the above binary tree is: 
20 22 25 14 7
 Note: In the left view of a binary tree, the order in which the nodes are displayed in the output is not relevant. All one should care about is that all of the nodes that are visible from the left side of the binary tree should be included in the output. Approach 1: Using Recursion The approach is to use the recursion to find the left view of the binary tree. A parameter can be passed to all of the recursive calls to find the level of a node. Whenever we come across a node whose level is more than the maximum level found so far, we display that node. It is because it is the first node encountered at this level. Since we have to display the left view of a binary tree, we have to traverse in such a way that the left subtree is visited before the right subtree. Implementation Let's see the implementation of the left view of a binary tree using recursion. The following code takes the O(n) time to complete its job, and the space complexity of the program is also O(n) because of the stack used in the recursive calls, where n is the total number of nodes present in the binary tree. FileName: LeftViewExample.java 
// class representing the node of a binary tree.
class BTNode 
{
// for keeping the value of a node
int val;
// lt and rt are representative of the  
// right child and the left child of a node
BTNode lt, rt;
// constructor of the class BTNode
// it initializes the class fields
public BTNode(int j)
{
val = j;
rt = null;
lt = null;
}
}
public class LeftViewExample 
{
BTNode r;
int maxLevel = 0; // for the maximum level
// recursive method to display the left view
public void leftViewUtility(BTNode nde, int lvl)
{
// handlng the base Case
if (nde == null)
{
return;
}
// we have found the first node of its level.
if (maxLevel < lvl) 
{
// printing the value of the first node at its level
System.out.print(nde.val + " ");
// updating the value of maxLevel
maxLevel = lvl;
}
// Recurring for the left subtree
leftViewUtility(nde.lt, lvl + 1);
// Recurring for the right subtree
leftViewUtility(nde.rt, lvl + 1);
}
// A wrapper method over the leftViewUtility() method
public void leftView()
{
leftViewUtility(r, 1);
}
// main method
public static void main(String argvs[])
{
// creating an object of the class LeftViewExample
LeftViewExample lv = new LeftViewExample();
// root node
lv.r = new BTNode(20);
// other nodes of the tree
lv.r.lt = new BTNode(22);
lv.r.rt = new BTNode(8);
lv.r.lt.lt = new BTNode(25);
lv.r.lt.rt = new BTNode(3);
lv.r.rt.rt = new BTNode(5);
lv.r.lt.rt.rt = new BTNode(10);
lv.r.lt.rt.lt = new BTNode(14);
lv.r.lt.rt.lt.rt = new BTNode(7);
System.out.println("The following are the nodes present in the left view of the Binary Tree: ");
// invoking the method leftView()
lv.leftView();
}
}
 Output: The following are the nodes present in the left view of the Binary Tree: 
20 22 25 14 7
 Approach 2: Using Queue() If we observe carefully, we will find that the left view of a binary tree is the first node encountered at every level. Therefore, we can use the queue data structure to traverse each level of the binary tree. At each level, we print only the value of the first node found at each level. Implementation Let's see the implementation of the left view of a binary tree using the queue. The time complexity of the below program is O(n), where n is the total number of nodes present in the tree. FileName: LeftViewExample1.java 
// import important statement
import java.util.*;
// class representing the node of a binary tree.
class BTNode 
{
// for keeping the value of a node
int val;
// lt and rt are representative of the  
// right child and the left child of a node
BTNode lt, rt;
// constructor of the class BTNode
// it initializes the class fields
public BTNode(int j)
{
val = j;
rt = null;
lt = null;
}
}
public class LeftViewExample1 
{
BTNode r = null;
// method to display the left view of the binary tree
public void displayLeftView()
{
if (r == null)
{
return;
}
Queue<BTNode> que = new LinkedList<>();
que.add(r);
while (!que.isEmpty()) 
{
// number of nodes at current level
int siz = que.size();
// Traverse all nodes of current level
for (int j = 1; j <= siz; j++) 
{
BTNode tmp = que.poll();
// displaying the value of the left most node at
// each level
if (j == 1)
{
System.out.print(tmp.val + " ");
}
// Adding the left node to the queue
if (tmp.lt != null)
{
que.add(tmp.lt);
}
// Adding the right node to the queue
if (tmp.rt != null)
{
que.add(tmp.rt);
}
}
}
}
// main method
public static void main(String argvs[])
{
// creating an object of the class LeftViewExample1
LeftViewExample1 lv = new LeftViewExample1();
// root node
lv.r = new BTNode(20);
// remaining nodes of the tree
lv.r.lt = new BTNode(22);
lv.r.rt = new BTNode(8);
lv.r.lt.lt = new BTNode(25);
lv.r.lt.rt = new BTNode(3);
lv.r.rt.rt = new BTNode(5);
lv.r.lt.rt.rt = new BTNode(10);
lv.r.lt.rt.lt = new BTNode(14);
lv.r.lt.rt.lt.rt = new BTNode(7);
System.out.println("The following are the nodes present in the left view of the Binary Tree: ");
// invoking the method displayLeftView()
lv.displayLeftView();
}
}
 Output: The following are the nodes present in the left view of the Binary Tree: 
20 22 25 14 7
 Next Topic Pangram Program in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
