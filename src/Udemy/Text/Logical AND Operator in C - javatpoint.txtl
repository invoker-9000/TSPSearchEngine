Logical AND Operator in C - javatpoint ? SCROLL TO TOP Home C C++ C# Java SQL HTML CSS JavaScript XML Ajax Android Cloud Design Pattern Quiz Projects Interview Q Comment Forum C/C++ Training C Tutorial What is C Language History of C Features of C How to install C First C Program Compilation Process in C printf scanf Variables in C Data Types in c Keywords in c C Identifiers C Operators C Comments C Format Specifier C Escape Sequence ASCII value in C Constants in C Literals in C Tokens in C C Boolean Static in C Programming Errors in C Compile time vs Runtime Conditional Operator in C Bitwise Operator in C 2s complement in C C Fundamental Test C Control Statements C if-else C switch if-else vs switch C Loops C do-while loop C while loop C for loop Nested Loops in C Infinite Loop in C C break C continue C goto Type Casting C Control Statement Test C Functions What is function Call: Value & Reference Recursion in c Storage Classes C Functions Test C Array 1-D Array 2-D Array Return an Array in C Array to Function C Array Test C Pointers C Pointers C Pointer to Pointer C Pointer Arithmetic Dangling Pointers in C sizeof() operator in C const Pointer in C void pointer in C C Dereference Pointer Null Pointer in C C Function Pointer Function pointer as argument in C C Pointers Test C Dynamic Memory Dynamic memory C Strings String in C C gets() & puts() C String Functions C strlen() C strcpy() C strcat() C strcmp() C strrev() C strlwr() C strupr() C strstr() C String Test C Math C Math Functions C Structure Union C Structure typedef in C C Array of Structures C Nested Structure Structure Padding in C C Union C Structure Test C File Handling C File Handling C fprintf() fscanf() C fputc() fgetc() C fputs() fgets() C fseek() C rewind() C ftell() C Preprocessor C Preprocessor C Macros C #include C #define C #undef C #ifdef C #ifndef C #if C #else C #error C #pragma C Preprocessor Test C Command Line Command Line Arguments C Misc C Expressions Data Segments Flow of C Program Classification of Programming Languages Enum in C What is getch() in C What is the function call in C typedef vs define in C C Programming Test C Programming Test C Programs Top 10+ C Programs Fibonacci Series Prime Number Palindrome Number C program to compare the two strings Strings Concatenation in C Factorial Armstrong Number Sum of digits Count the number of digits in C Reverse Number Swap Number Print "Hello" without ; Assembly code in C C program without main Matrix Multiplication Decimal to Binary Number in Characters Alphabet Triangle Number Triangle Fibonacci Triangle Hexadecimal to Binary Hexadecimal to Decimal Octal to Hexadecimal in C Strong number in C Star Program in C itoa Function in C Extra Long Factorials in C Leap year program in C Perfect Number Program in C Variables vs Constants Round Robin Program in C with Output C Program to find the roots of quadratic equation Type Casting vs Type Conversion How to run a C program in Visual Studio Code Modulus Operator in C/C++ Sum of first N natural numbers in C Big O Notation in C LCM of two numbers in C while loop vs do-while loop in C Memory Layout in C Balanced Parenthesis in C Binary to Decimal Number in C GCD of two numbers in C Getchar() function in C flowchart in C Simpson Method Pyramid Patterns in C Random Function in C Floyd's Triangle in C C Header Files abs() function in C Atoi() function in C Structure Pointer in C sprintf() in C Range of Int in C C Program to convert 24 Hour time to 12 Hour time What is double in C What is the main in C Calculator Program in C Calloc in C user-defined vs library function in C Memset C ASCII Table in C Static function in C Reverse a String in C Twin Prime Numbers in C strchr() function in C Structure of a C program Power Function in C Malloc in C Table Program in C Types of Recursion in C Convert Uppercase to Lowercase in C Unary Operator in C Arithmetic Operator in C Ceil Function in C Relational Operator in C Assignment Operator in C Pre-increment and Post-increment Operator in C Pointer vs array in C Restrict keyword in C The exit() function in C Const Qualifier in C Sequence Points in C Anagram in C Increment and Decrement Operators in C Logical AND Operator in C Shift Operators in C Near, Far, and Huge pointers in C language Magic Number in C Remove Duplicate Elements from an Array in C Generic Linked list in C isalnum() function in C isalpha() function in C Bisection Method in C snprintf() function in C MCQ C language MCQ C language MCQ Part 2 Math Prime Numbers List Composite Numbers List Square Numbers List Binary Numbers List Fibonacci Numbers List Ounces in a Cup Ounces in a Pound Ounces in a Gallon Ounces in a Liter Ounces in a Pint Ounces in a Quart Ounces in a Tablespoon C Interview C Interview Questions next ? ? prev Logical AND Operator in C Logical operators perform logical operations on a given expression by joining two or more expressions or conditions. It can be used in various relational and conditional expressions. This operator is based on Boolean values to logically check the condition, and if the conditions are true, it returns 1. Otherwise, it returns 0 (False). In C programming, logical operators are classified into three types such as the logical AND (&&) operator, the logical OR operator (||), and the logical NOT (!) operator. Here, we learn about the Logical AND operator and its various examples in the C programming language. Logical AND Operator The logical AND operator is represented as the '&&' double ampersand symbol. It checks the condition of two or more operands by combining in an expression, and if all the conditions are true, the logical AND operator returns the Boolean value true or 1. Else it returns false or 0. Note: If the value of both is non-zero, the condition will remain true. Otherwise, the logical AND (&&) operator returns 0 (false). Syntax 
(condition1 && condition2)
 There are two conditions in the above syntax, condition1 and condition2, and in between the double (&&) ampersand symbol. If both the conditions are true, the logical AND operator returns Boolean value 1 or true. Otherwise, it returns false. Truth table of the Logical AND (&&) operator A B A && B 1 1 1 1 0 0 0 1 0 0 0 0 Example 1: Program to demonstrate the Logical AND Operator in C 
#include <stdio.h>
#include <conio.h>

int main ()
{
	// declare variable
	int n = 20;
	
	// use Logical AND (&&) operator to check the condition
	printf (" %d \n", (n == 20 && n >= 8)); // condition is true, therefore it returns 1
	printf (" %d \n", (n >= 1 && n >= 20));
	printf (" %d \n", (n == 10 && n >= 0));
	printf (" %d \n", (n >= 20 && n <= 40));
	
	return 0;
} 
 Output 1
1
0
1
 Example 2: Program to find the largest number using the Logical AND operator 
#include <stdio.h>
#include <conio.h>
int main ()
{
// declare integer type variable
int x, y, z;
printf (" Enter the first number: ");
scanf ("%d", &x);
printf (" Enter the second number: ");
scanf ("%d", &y);
printf (" Enter the third number: ");
scanf ("%d", &z);

// use logical AND operator to validate the condition
if ( x >= y && x >= z )
{
printf (" %d is the largest number of all. ", x);
}
else if ( y >= x && y >= z)
{
printf (" %d is the largest number of all. ", y);
}
else
{
	printf ( " %d is the largest number of all. ", z);
}
return 0;
}
 Output Enter the first number: 20
Enter the second number: 10
Enter the third number: 50
50 is the largest number of all
 Example 3: Program to use the Logical AND (&&) operator to check whether the user is teenager or not. 
#include <stdio.h>
#include <conio.h>

int main ()
{
	// declare variable
	int age;
	
	printf (" Enter the age: ");
	scanf (" %d", &age); // get age
	
	// use logical AND operator to check more than one condition
	if ( age >= 13 && age <= 19) 
	{
		printf (" %d is a teenager age. ", age);
	}
	else
	{
		printf (" %d is not a teenager age. ", age);
	}
	
	return 0;
}
 Output Enter the age: 17
17 is a teenager age.

2nd execution:
Enter the age: 10
10 is not a teenager age.
 Example 4: Program to validate whether the entered number is in the defined range or not. 
#include <stdio.h>

int main ()
{
	int num;
	printf (" Enter a number between 1 to 50: ");
	scanf (" %d", &num); //get the number
	
	// use logical AND operator to check condition
	if ( (num > 0 ) && (num <= 50))
	{
		printf (" The entered number is in the range 0 and 50. ");
	}
	else if ( ( num > 50 ) && ( num <= 100))
	{
		printf (" The entered number is in the range 50 and 100. ");
	}
	else
	{
		printf (" Please enter the number is in the defined range. ");
	}
	return 0;
	
 }
 Output Enter a number between 1 to 50: 19
The entered number is in the range 0 and 50.

2nd Run 
Enter a number between 1 to 50:
51
The entered number is in the range 50 and 100.

3rd execution:
Enter a number between 1 to 50:
0
Please enter the number is in the defined range.
 Example 5: Program to validate the username and password entered by the user is correct or not using the predefined username and password. 
#include <stdio.h>
#include <string.h>

// use #define macro to define the values for UserName and Password
#define UserName "system"
#define Password "admin@123"

int main ()
{
// declare character type array
char un[50], pass[50];
// take UserName and Password from user
printf ( " Enter the username: " );
scanf (" %s", un);
printf ( " Enter the password: " );
scanf (" %s", pass);

// use if statement and Logical AND operator to validate the condition
if (strcmp (UserName, un) == 0 && strcmp (Password, pass) == 0)
{
printf (" \n The user's credentials are correct. ");
}
else
{
printf ( " \n The user's credentials are incorrect. ");
}
return 0;
}  
 Output Enter the username: system
Enter the password: [email protected]

The user's credentials are correct.

2nd execution
Enter the username: system
Enter the password: [email protected]

The user's credentials are incorrect.
 Next Topic Shift Operators in C ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
