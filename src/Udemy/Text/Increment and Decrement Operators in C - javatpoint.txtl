Increment and Decrement Operators in C - javatpoint ? SCROLL TO TOP Home C C++ C# Java SQL HTML CSS JavaScript XML Ajax Android Cloud Design Pattern Quiz Projects Interview Q Comment Forum C/C++ Training C Tutorial What is C Language History of C Features of C How to install C First C Program Compilation Process in C printf scanf Variables in C Data Types in c Keywords in c C Identifiers C Operators C Comments C Format Specifier C Escape Sequence ASCII value in C Constants in C Literals in C Tokens in C C Boolean Static in C Programming Errors in C Compile time vs Runtime Conditional Operator in C Bitwise Operator in C 2s complement in C C Fundamental Test C Control Statements C if-else C switch if-else vs switch C Loops C do-while loop C while loop C for loop Nested Loops in C Infinite Loop in C C break C continue C goto Type Casting C Control Statement Test C Functions What is function Call: Value & Reference Recursion in c Storage Classes C Functions Test C Array 1-D Array 2-D Array Return an Array in C Array to Function C Array Test C Pointers C Pointers C Pointer to Pointer C Pointer Arithmetic Dangling Pointers in C sizeof() operator in C const Pointer in C void pointer in C C Dereference Pointer Null Pointer in C C Function Pointer Function pointer as argument in C C Pointers Test C Dynamic Memory Dynamic memory C Strings String in C C gets() & puts() C String Functions C strlen() C strcpy() C strcat() C strcmp() C strrev() C strlwr() C strupr() C strstr() C String Test C Math C Math Functions C Structure Union C Structure typedef in C C Array of Structures C Nested Structure Structure Padding in C C Union C Structure Test C File Handling C File Handling C fprintf() fscanf() C fputc() fgetc() C fputs() fgets() C fseek() C rewind() C ftell() C Preprocessor C Preprocessor C Macros C #include C #define C #undef C #ifdef C #ifndef C #if C #else C #error C #pragma C Preprocessor Test C Command Line Command Line Arguments C Misc C Expressions Data Segments Flow of C Program Classification of Programming Languages Enum in C What is getch() in C What is the function call in C typedef vs define in C C Programming Test C Programming Test C Programs Top 10+ C Programs Fibonacci Series Prime Number Palindrome Number C program to compare the two strings Strings Concatenation in C Factorial Armstrong Number Sum of digits Count the number of digits in C Reverse Number Swap Number Print "Hello" without ; Assembly code in C C program without main Matrix Multiplication Decimal to Binary Number in Characters Alphabet Triangle Number Triangle Fibonacci Triangle Hexadecimal to Binary Hexadecimal to Decimal Octal to Hexadecimal in C Strong number in C Star Program in C itoa Function in C Extra Long Factorials in C Leap year program in C Perfect Number Program in C Variables vs Constants Round Robin Program in C with Output C Program to find the roots of quadratic equation Type Casting vs Type Conversion How to run a C program in Visual Studio Code Modulus Operator in C/C++ Sum of first N natural numbers in C Big O Notation in C LCM of two numbers in C while loop vs do-while loop in C Memory Layout in C Balanced Parenthesis in C Binary to Decimal Number in C GCD of two numbers in C Getchar() function in C flowchart in C Simpson Method Pyramid Patterns in C Random Function in C Floyd's Triangle in C C Header Files abs() function in C Atoi() function in C Structure Pointer in C sprintf() in C Range of Int in C C Program to convert 24 Hour time to 12 Hour time What is double in C What is the main in C Calculator Program in C Calloc in C user-defined vs library function in C Memset C ASCII Table in C Static function in C Reverse a String in C Twin Prime Numbers in C strchr() function in C Structure of a C program Power Function in C Malloc in C Table Program in C Types of Recursion in C Convert Uppercase to Lowercase in C Unary Operator in C Arithmetic Operator in C Ceil Function in C Relational Operator in C Assignment Operator in C Pre-increment and Post-increment Operator in C Pointer vs array in C Restrict keyword in C The exit() function in C Const Qualifier in C Sequence Points in C Anagram in C Increment and Decrement Operators in C Logical AND Operator in C Shift Operators in C Near, Far, and Huge pointers in C language Magic Number in C Remove Duplicate Elements from an Array in C Generic Linked list in C isalnum() function in C isalpha() function in C Bisection Method in C snprintf() function in C MCQ C language MCQ C language MCQ Part 2 Math Prime Numbers List Composite Numbers List Square Numbers List Binary Numbers List Fibonacci Numbers List Ounces in a Cup Ounces in a Pound Ounces in a Gallon Ounces in a Liter Ounces in a Pint Ounces in a Quart Ounces in a Tablespoon C Interview C Interview Questions next ? ? prev Increment and Decrement Operators in C Operators are the predefined symbols of the C/C++ library, and it is used to perform logical as well as mathematical operations to the operands. There are various types of operators in the C programming language, such as arithmetic, logical, bitwise, increment or decrement operators, etc. Increment Operator Increment Operators are the unary operators used to increment or add 1 to the operand value. The Increment operand is denoted by the double plus symbol (++). It has two types, Pre Increment and Post Increment Operators. Pre-increment Operator The pre-increment operator is used to increase the original value of the operand by 1 before assigning it to the expression. Syntax 
X = ++A;
 In the above syntax, the value of operand 'A' is increased by 1, and then a new value is assigned to the variable 'B'. Example 1: Program to use the pre-increment operator in C 
#include <stdio.h>
#include <conio.h>
int main ()
{
 // declare integer variables
int x, y, z;
printf (" Input the value of X: ");
scanf (" %d", &x);      
printf ("  Input the value of Y: ");
scanf (" %d", &y);
printf (" Input the value of Z: ");
scanf (" %d", &z);
// use pre increment operator to update the value by 1
++x;
++y;
++z;

printf (" \n The updated value of the X: %d ", x);
printf (" \n The updated value of the Y: %d ", y);
printf (" \n The updated value of the Z: %d ", z); 
return 0;
}
 Output Input the value of X: 10
Input the value of Y: 15
Input the value of Z: 20

The updated value of the X: 11
The updated value of the Y: 16
The updated value of the Z: 21
 Post increment Operator The post-increment operator is used to increment the original value of the operand by 1 after assigning it to the expression. Syntax 
X = A++;
 In the above syntax, the value of operand 'A' is assigned to the variable 'X'. After that, the value of variable 'A' is incremented by 1. Example 2: Program to use the post-increment operator in C 
#include <stdio.h>
#include <conio.h>
int main ()
{
 // declare integer variables
int x, y, z, a, b, c;
printf (" Input the value of X: ");
scanf (" %d", &x);      
printf (" Input the value of Y: ");
scanf (" %d", &y);
printf (" Input the value of Z: ");
scanf (" %d", &z);
// use post-increment operator to update the value by 1
a = x++;
b = y++;
c = z++;

printf (" \n The original value of a: %d", a);
printf (" \n The original value of b: %d", b);
printf (" \n The original value of c: %d", c);

printf (" \n\n The updated value of the X: %d ", x);
printf (" \n The updated value of the Y: %d ", y);
printf (" \n The updated value of the Z: %d ", z); 
return 0;
}
 Output Input the value of X: 10
Input the value of Y: 15
Input the value of Z: 20

The original value of a: 10
The original value of b: 15
The original value of c: 20

The updated value of the X: 11
The updated value of the Y: 16
The updated value of the Z: 21
 Decrement Operator Decrement Operator is the unary operator, which is used to decrease the original value of the operand by 1. The decrement operator is represented as the double minus symbol (--). It has two types, Pre Decrement and Post Decrement operators. Pre Decrement Operator The Pre Decrement Operator decreases the operand value by 1 before assigning it to the mathematical expression. In other words, the original value of the operand is first decreases, and then a new value is assigned to the other variable. Syntax 
B = --A;
 In the above syntax, the value of operand 'A' is decreased by 1, and then a new value is assigned to the variable 'B'. Example 3: Program to demonstrate the pre decrement operator in C 
#include <stdio.h>
#include <conio.h>
int main ()
{
 // declare integer variables
int x, y, z;
printf (" Input the value of X: ");
scanf (" %d", &x);      
printf (" \n Input the value of Y: ");
scanf (" %d", &y);
printf ("n Input the value of Z: ");
scanf (" %d", &z);
// use pre decrement operator to update the value by 1
--x;
--y;
--z;

printf (" \n The updated value of the X: %d ", x);
printf (" \n The updated value of the Y: %d ", y);
printf (" \n The updated value of the Z: %d ", z); 
return 0;
}
 Output Input the value of X: 5
Input the value of Y: 6
Input the value of Z: 7

The updated value of the X: 6
The updated value of the Y: 7
The updated value of the Z: 8
 Post decrement Operator: Post decrement operator is used to decrease the original value of the operand by 1 after assigning to the expression. Syntax 
B = A--;
 In the above syntax, the value of operand 'A' is assigned to the variable 'B', and then the value of A is decreased by 1. Example 4: Program to use the post decrement operator in C 
#include <stdio.h>
#include <conio.h>
int main ()
{
 // declare integer variables
int x, y, z, a, b, c;
printf (" Input the value of X: ");
scanf (" %d", &x);      
printf (" Input the value of Y: ");
scanf (" %d", &y);
printf (" Input the value of Z: ");
scanf (" %d", &z);
// use post-decrement operator to update the value by 1
a = x--;
b = y--;
c = z--;

printf (" \n The original value of a: %d", a);
printf (" \n The original value of b: %d", b);
printf (" \n The original value of c: %d", c);

printf (" \n\n The updated value of the X: %d ", x);
printf (" \n The updated value of the Y: %d ", y);
printf (" \n The updated value of the Z: %d ", z); 
return 0;
}
 Output Input the value of X: 6
Input the value of Y: 12
Input the value of Z: 18

The original value of a: 6
The original value of b: 12
The original value of c: 18

The updated value of the X: 5
The updated value of the Y: 11
The updated value of the Z: 17
 Example 5: Program to perform the pre increment and pre decrement operator 
#include <stdio.h>
#include <conio.h>
int main ()
{
// declare integer data type variable
int i, j, x, y;
printf (" Enter the value of i " );
scanf (" %d", &i); 
printf (" Enter the value of j " );
scanf (" %d", &j);

// use pre increment operator to update original value by 1
x = ++i; 
printf (" After using the pre-incrementing, the value of i is %d \n", i);
printf (" The value of x is %d \n", x);

// use pre decrement operator to decrease original value by 1
y = --j; 
printf (" After using the pre-decrementing, the value of j is %d \n", j);
printf (" The value of y is %d \n", y);
return 0;
}
 Output Enter the value of i
5
Enter the value of j
10
After using the pre-incrementing, the value of i is 6
The value of x is 6
After using the pre-decrementing, the value of j is 9
The value of y is 9
 Example 6: Program to print the post increment and post decrement operator 
#include <stdio.h>
#include <conio.h>
int main ()
{
// declare integer data type variable
int i, j, x, y;
printf (" Enter the value of i " );
scanf (" %d", &i); 
printf (" Enter the value of j " );
scanf (" %d", &j);

// use post increment operator to update original value by 1
x = i++; 
printf (" After using the post-incrementing, the value of i is  %d \n", i);
printf (" The value of x is %d \n", x);

// use post decrement operator to decrease original value by 1
y = j--; 
printf (" After using the post-decrementing, the value of j is  %d \n", j);
printf (" The value of y is %d \n", y);
return 0;
}
 Output Enter the value of i 10
Enter the value of j 20
After using the post-incrementing, the value of i is 11
The value of x is 10
After using the post-decrementing, the value of j is 19
The value of y is 20
 Difference between the Increment and Decrement Operator in C Increment Operator Decrement Operator It is used to increment the value of a variable by 1. It is used to decrease the operand values by 1. The increment operator is represented as the double plus (++) symbol. The decrement operator is represented as the double minus (--) symbol. It has two types: pre-increment operator and post-increment operator. Similarly, it has two types: the pre-decrement operator and the post-decrement operator. Pre increment operator means the value of the operator is incremented first and then used in the expression. The post-increment operator means the operand is first used in the expression and then performs the increment operation to the original value by 1. Pre decrement means the value of the operator is decremented first and then assigned in the expression. Whereas the post decrement operator means the operand is first used in the expression and then performs the decrement operation to the operand's original value by 1. Syntax for the pre increment operator: X = ++a; Syntax for the post increment operator: X = a++; Syntax for the pre decrement operator: X = --a; Syntax for the post decrement operator: X = a--; Both operators' works only to the single operand, not values. Both operators' works only to the single operand, not values. Next Topic Logical AND Operator in C ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
