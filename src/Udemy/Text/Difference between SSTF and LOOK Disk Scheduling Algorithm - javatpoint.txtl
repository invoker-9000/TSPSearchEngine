Difference between SSTF and LOOK Disk Scheduling Algorithm - javatpoint ? SCROLL TO TOP Home OS C Java PHP HTML CSS Bootstrap JavaScript jQuery jQuery UI Quiz Projects Interview Q Comment Forum Training OS Tutorial OS Tutorial Types of OS Process Management Introduction Attributes of a Process Process States Process Schedulers Process Queues Times Related to Process CPU Scheduling Scheduling Algorithms FCFS Scheduling Convoy Effect in FCFS FCFS with overhead SJF Scheduling Burst Time Prediction SRTF scheduling SRTF GATE 2011 Example Round Robin Scheduling RR scheduling Example HRRN Scheduling HRNN Example Priority Scheduling Non Preemptive Priority Preemptive Priority SRTF:IO bound processes Synchronization Introduction Critical Section Problem Lock Variable Mechanism TSL Mechanism Priority Inversion in TSL Turn Variable Interested Variable Paterson Solution Without Busy Waiting Sleep and Wake Semaphore Introduction Counting Semaphore Problem on counting semaphore Binary Semaphore Deadlocks Introduction strategies Handling Deadlock Prevention Deadlock Avoidance Resource Allocation Graph Detection using RAG Detection and Recovery Memory Management Introduction Fixed Partitioning Dynamic Partitioning Compaction Bit Map for Dynamic Partitioning Linked List for Dynamic Partitioning Partitioning Algorithms GATE on Best Fit & First Fit Need for Paging Paging with Example Binary Addresses Physical & Logical Address Page Table Mapping from page table Page Table Entry Page Table Size Finding Optimal Page Size Virtual Memory Look aside Buffer GATE question on TLB Demand Paging Inverted Page Table Page Replacement Gate on LRU and FIFO Numerical on LRU, FIFO Beladys Anamoly Segmentation Paging VS Segmentation Segmented Paging File Management Attributes of the File Operations on the File File Access Methods Directory Structure Single level Directory Two level Directory Tree structured Directory Acyclic Graph Directories File System File System Structure Master Boot Record On Disk Data Structures In memory Data structures Directory Implementation Allocation Methods Contiguous Allocation Linked List Allocation File Allocation Table Indexed Allocation Linked Index Allocation Inode Free space Management Disk Scheduling FCFS Scheduling SSTF Scheduling SCAN and C-SCAN Look and C-Look Numerical on SSTF Numerical on Disk Misc Functions of OS Mobile OS Swapping in OS Threads in OS Fedora Operating System Uses of Operating System Producer-Consumer problem Dining Philosophers Problem Readers Writers Problem History Of OS Banker's Algorithm in OS What is the context switching in the operating system Internal vs. External Fragmentation Multiprocessing Operating system Multiprogramming vs Multitasking Network Operating System Latest Operating System System Calls in Operating System Multitasking Operating System Distributed Operating System Fragmentation in Operating System Multithreading Models in Operating system Operating system services Batch Operating System Embedded Operating System Time-Sharing vs Real-Time Operating System Multi-User Operating System Memory Management Monolithic Structure of Operating System MS-DOS Operating System Spooling in Operating System Network Operating System vs Distributed Operating System Operating system vs Application software System Software vs Operating System Real-Time operating system Booting in Operating System Layered Structure of Operating System Multiprogramming vs. Time Sharing Operating System Distributed File System Multiprogramming Operating System Server Operating System 32 bit vs 64 bit Operating System Single User Operating System Process vs Program Operating System Security Components of Operating System GUI Operating System Android Operating System Buffering in Operating System Device Driver in Operating System Best Operating System for Hacking Clustered Operating System Android vs Windows OS Scheduler vs Dispatcher Deadlock vs Starvation Semaphore vs Monitor Boot Block and Bad Block in Operating System Hard and Soft Real-Time Operating System Concurrency in Operating System Microkernel in Operating System Protection in Operating System Benefits of Multithreading Host vs Guest Operating System Livelock in Operating System Dual Mode Operations in Operating System What is Access Token in Operating System Deadlock Detection in Distributed Systems CUI vs GUI Monolithic vs layered Operating System Mutex vs Semaphore What is Interleaved Memory Trap vs Interrupt in Operating System Open-Source Operating System Multiple Processors Scheduling in Operating System Starvation and Aging in Operating Systems Best Android Operating System for PC Device Management in Operating System Disk Controller in Operating System Views of Operating System Tasks in Real-Time Systems What is RPC in Operating System C-SCAN vs SSTF Disk Scheduling Algorithm Look vs C-Look Disk Scheduling Algorithm SCAN vs C-SCAN Disk Scheduling Algorithm SCAN vs FCFS Disk Scheduling Algorithm Lamport's Bakery Algorithm Basic Disk vs Dynamic Disk What is Zombie Process FCFS vs SSTF Disk Scheduling Algorithm LRU vs LFU Page Replacement Algorithm SSTF vs C-LOOK Disk Scheduling Algorithm C-LOOK vs C-SCAN Disk Scheduling Algorithm Rotational Latency vs Disk Access Time in Disk Scheduling SSTF vs LOOK Disk Scheduling Algorithm Virtual vs Physical Address Address binding in Operating System Preemptive vs Non-Preemptive Scheduling Properties of Operating System What is Processor Affinity MCQ Operating System MCQ OS MCQ Part-2 next ? ? prev Difference between SSTF and LOOK Disk Scheduling Algorithm Operating systems do disk scheduling to schedule I/O requests arriving for the disk. Disk scheduling is also known as I/O scheduling. The goal of disk scheduling algorithms is to maximize the throughput and minimize the response time. Here are six different disk scheduling algorithms, such as First Come First Serve (FCFS), Shortest Seek Time First (SSTF), Scan, Look, C-Scan, and C-look disk scheduling by comparing their head movement in different runs. What is SSTF Disk Scheduling Algorithm? SSTF stands for Shortest Seek Time First. This algorithm serves the task request, which is closest to the current position of the head or pointer. Here, the direction of the head plays a vital role in determining total head movement. If a tie occurs between requests, then the head will serve the request, which encounters it in its ongoing direction. Unlike C-LOOK, the SSTF algorithm is very efficient in total seek time. In SSTF, requests having the shortest seek time are executed first. So, the seek time of every request is calculated in advance in the queue, and when they are scheduled according to their calculated seek time. As a result, the request near the disk arm will get executed first. SSTF is certainly an improvement over FCFS as it decreases the average response time and increases the throughput of the system. It is a reasonable solution for a batch processing system. Sometimes, it does not ensure fairness because, with this scheduling, starvation is possible. This policy is generally not acceptable for interactive systems, and it leads to higher variances of response times. Example In this case, the request is serviced according to the next shortest distance. Starting at 50, the next shortest distance would be 62 instead of 34 since it is only 12 tracks away from 62 and 16 tracks away from 34. The process would continue until all the processes are taken care of. For example, the next case would be to move from 62 to 64 instead of 34 since there are only 2 tracks between them and not 18 if it were to go the other way. Although this seems to be a better service because it moved all 236 tracks, it is not optimal. There is a great chance that starvation would occur, and this is because if there were many requests close to each other, the other requests would never be handled since the distance would always be greater. Advantages Here are the following advantages of the SSTF Disk Scheduling Algorithm, such as: It reduces the total seek time as compared to FCFS. It provides increased throughput , and it provides less average response time and waiting time. Disadvantages SSTF Disk Scheduling Algorithm also has the following disadvantages, such as: There is an overhead of finding out the closest request. And the requests which are far from the head might starve for the CPU. It provides a high variance in response time and waiting time. Switching the direction of the head frequently slows down the algorithm. What is the LOOK Disk Scheduling Algorithm? LOOK algorithm is actually an improved version of the SCAN Algorithm. In this algorithm, the head starts the first request at one side of the disk and moves towards the other end by serving all requests in between. Unlike SCAN, the head, instead of going till the last track, goes till the last request, and then the direction is changed. Unlike SSTF, it doesn't serve the task request which is closest to the current position of the head or pointer. It is similar to the SCAN disk scheduling algorithm except for the difference that the disk arm, despite going to the end of the disk, goes only to the last request to be serviced in front of the head and then reverses its direction from there only. Thus it prevents the extra delay which occurred due to unnecessary traversal to the end of the disk. The main difference between the SCAN Algorithm and LOOK algorithm is: SCAN Algorithm scans all the cylinders of the disk starting from one end to the other end even if there are no requests at the ends. LOOK Algorithm scans all the cylinders of the disk starting from the first request at one end to the last request at the other end. Example Consider a disk with 200 tracks (0-199) and the disk queue having I/O requests in the following order: 98, 183, 40, 122, 10, 124, and 65. The current head position of the Read\Write head is 53 and will move in the right direction. Calculate the total number of track movements of the Read/Write head using the LOOK algorithm. 
Total head movements,
= (65-53) + (98-65) + (122-98) + (124-122) + (183-124) + (183-40) + (40-10)
= 303 
 Advantages of LOOK Disk Scheduling Algorithm Here are the following advantages of the LOOK disk scheduling algorithm, such as: It does not cause the head to move till the ends of the disk when there are no requests to be serviced. It provides better performance as compared to the SCAN Algorithm. It does not lead to starvation. It provides low variance in response time and waiting time. Disadvantages of LOOK Disk Scheduling Algorithm Look disk scheduling algorithm also has some disadvantages, such as: There is an overhead of finding the end requests. And it causes a long waiting time for the cylinders just visited by the head. Difference between SSTF and LOOK Disk Scheduling Algorithm Below are the following differences between SSTF and LOOK disk scheduling algorithm. SSTF Disk Scheduling Algorithm LOOK Disk Scheduling Algorithm SSTF disk scheduling algorithm lags in performance. The performance of the LOOK disk scheduling algorithm is better than SSTF. It reduces total seek time as compared to the LOOK disk scheduling algorithm. LOOK disk scheduling algorithm is increased total seek time. This algorithm provides high variance average response time and waiting time. It provides low variance in average waiting time and response time. As shown in the above example, the direction of the head plays an important role in breaking the tie between requests. In the LOOK disk scheduling algorithm, the direction of the head gets reversed when it serves the last request in one direction. In the SSTF disk scheduling algorithm, there is an overhead for finding out the closest request. In this algorithm, there is an overhead for finding end requests. In the SSTF disk scheduling algorithm, the request which is far from the head will suffer starvation. LOOK disk scheduling algorithm does not cause starvation to any request. In the SSTF disk scheduling algorithm, the handling of requests is not as good as the LOOK algorithm. LOOK disk scheduling algorithm can handle requests more effectively than SSTF. SSTF Scheduling has higher throughput and lower response time than FCFS Policy. The main advantage of this scheduling is that it only performs sweeps large enough to service all requests. It improves efficiency by avoiding unnecessary seek operation, and it gives high throughput. Next Topic Virtual vs Physical Address ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
