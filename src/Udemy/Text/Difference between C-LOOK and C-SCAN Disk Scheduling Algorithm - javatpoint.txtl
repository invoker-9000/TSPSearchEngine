Difference between C-LOOK and C-SCAN Disk Scheduling Algorithm - javatpoint ? SCROLL TO TOP Home OS C Java PHP HTML CSS Bootstrap JavaScript jQuery jQuery UI Quiz Projects Interview Q Comment Forum Training OS Tutorial OS Tutorial Types of OS Process Management Introduction Attributes of a Process Process States Process Schedulers Process Queues Times Related to Process CPU Scheduling Scheduling Algorithms FCFS Scheduling Convoy Effect in FCFS FCFS with overhead SJF Scheduling Burst Time Prediction SRTF scheduling SRTF GATE 2011 Example Round Robin Scheduling RR scheduling Example HRRN Scheduling HRNN Example Priority Scheduling Non Preemptive Priority Preemptive Priority SRTF:IO bound processes Synchronization Introduction Critical Section Problem Lock Variable Mechanism TSL Mechanism Priority Inversion in TSL Turn Variable Interested Variable Paterson Solution Without Busy Waiting Sleep and Wake Semaphore Introduction Counting Semaphore Problem on counting semaphore Binary Semaphore Deadlocks Introduction strategies Handling Deadlock Prevention Deadlock Avoidance Resource Allocation Graph Detection using RAG Detection and Recovery Memory Management Introduction Fixed Partitioning Dynamic Partitioning Compaction Bit Map for Dynamic Partitioning Linked List for Dynamic Partitioning Partitioning Algorithms GATE on Best Fit & First Fit Need for Paging Paging with Example Binary Addresses Physical & Logical Address Page Table Mapping from page table Page Table Entry Page Table Size Finding Optimal Page Size Virtual Memory Look aside Buffer GATE question on TLB Demand Paging Inverted Page Table Page Replacement Gate on LRU and FIFO Numerical on LRU, FIFO Beladys Anamoly Segmentation Paging VS Segmentation Segmented Paging File Management Attributes of the File Operations on the File File Access Methods Directory Structure Single level Directory Two level Directory Tree structured Directory Acyclic Graph Directories File System File System Structure Master Boot Record On Disk Data Structures In memory Data structures Directory Implementation Allocation Methods Contiguous Allocation Linked List Allocation File Allocation Table Indexed Allocation Linked Index Allocation Inode Free space Management Disk Scheduling FCFS Scheduling SSTF Scheduling SCAN and C-SCAN Look and C-Look Numerical on SSTF Numerical on Disk Misc Functions of OS Mobile OS Swapping in OS Threads in OS Fedora Operating System Uses of Operating System Producer-Consumer problem Dining Philosophers Problem Readers Writers Problem History Of OS Banker's Algorithm in OS What is the context switching in the operating system Internal vs. External Fragmentation Multiprocessing Operating system Multiprogramming vs Multitasking Network Operating System Latest Operating System System Calls in Operating System Multitasking Operating System Distributed Operating System Fragmentation in Operating System Multithreading Models in Operating system Operating system services Batch Operating System Embedded Operating System Time-Sharing vs Real-Time Operating System Multi-User Operating System Memory Management Monolithic Structure of Operating System MS-DOS Operating System Spooling in Operating System Network Operating System vs Distributed Operating System Operating system vs Application software System Software vs Operating System Real-Time operating system Booting in Operating System Layered Structure of Operating System Multiprogramming vs. Time Sharing Operating System Distributed File System Multiprogramming Operating System Server Operating System 32 bit vs 64 bit Operating System Single User Operating System Process vs Program Operating System Security Components of Operating System GUI Operating System Android Operating System Buffering in Operating System Device Driver in Operating System Best Operating System for Hacking Clustered Operating System Android vs Windows OS Scheduler vs Dispatcher Deadlock vs Starvation Semaphore vs Monitor Boot Block and Bad Block in Operating System Hard and Soft Real-Time Operating System Concurrency in Operating System Microkernel in Operating System Protection in Operating System Benefits of Multithreading Host vs Guest Operating System Livelock in Operating System Dual Mode Operations in Operating System What is Access Token in Operating System Deadlock Detection in Distributed Systems CUI vs GUI Monolithic vs layered Operating System Mutex vs Semaphore What is Interleaved Memory Trap vs Interrupt in Operating System Open-Source Operating System Multiple Processors Scheduling in Operating System Starvation and Aging in Operating Systems Best Android Operating System for PC Device Management in Operating System Disk Controller in Operating System Views of Operating System Tasks in Real-Time Systems What is RPC in Operating System C-SCAN vs SSTF Disk Scheduling Algorithm Look vs C-Look Disk Scheduling Algorithm SCAN vs C-SCAN Disk Scheduling Algorithm SCAN vs FCFS Disk Scheduling Algorithm Lamport's Bakery Algorithm Basic Disk vs Dynamic Disk What is Zombie Process FCFS vs SSTF Disk Scheduling Algorithm LRU vs LFU Page Replacement Algorithm SSTF vs C-LOOK Disk Scheduling Algorithm C-LOOK vs C-SCAN Disk Scheduling Algorithm Rotational Latency vs Disk Access Time in Disk Scheduling SSTF vs LOOK Disk Scheduling Algorithm Virtual vs Physical Address Address binding in Operating System Preemptive vs Non-Preemptive Scheduling Properties of Operating System What is Processor Affinity MCQ Operating System MCQ OS MCQ Part-2 next ? ? prev Difference between C-LOOK and C-SCAN Disk Scheduling Algorithm Operating systems do disk scheduling to schedule I/O requests arriving for the disk. Disk scheduling is also known as I/O scheduling. Disk scheduling is important because multiple I/O requests may arrive by different processes, and only one I/O request can be served at a time by the disk controller. Thus other I/O requests need to wait in the waiting queue and need to be scheduled. Two or more requests may be far from each other, resulting in greater disk arm movement. Hard drives are one of the slowest parts of the computer system and thus need to be accessed efficiently. Below are some of the important terms used in disk scheduling, such as: Seek Time: Seek time is the time taken to locate the disk arm to a specified track where the data is read or written. So the disk scheduling algorithm that gives minimum average seek time is better. Rotational Latency: Rotational Latency is the time the desired disk sector takes to rotate into a position so that it can access the read/write heads. So the disk scheduling algorithm that gives minimum rotational latency is better. Transfer Time: Transfer time is the time to transfer the data, and it depends on the rotating speed of the disk and the number of bytes to be transferred. Disk Access Time:Disk Access Time is the summation of seek time, rotational latency, and transfer time. Disk Response Time: Response Time is the average time spent by request waiting to perform its I/O operation. Average Response timeis the response time of all requests. Variance Response Time is a measure of how individual requests are serviced for average response time. So the disk scheduling algorithm that gives minimum variance response time is better. Many disk scheduling algorithms include FCFS, SSTF, SCAN, C-SCAN, LOOK, C-LOOK, RSS, LIFO, F-SCAN, and N-STEP SCAN. What is C-SCAN Disk Scheduling Algorithm? C-SCAN algorithm, also known as the Circular Elevator algorithm, is the modified version of the SCAN algorithm. In this algorithm, the head pointer starts from one end of the disk and moves towards the other end, serving all requests in between. After reaching the other end, the head reverses its direction and goes to the starting point, and it then satisfies the remaining requests in the same direction as before. Unlike C-LOOK, the head pointer will move till the end of the disk, whether there is a request or not. For example: Consider a disk with 200 tracks (0-199) and the disk queue having I/O requests in the following order as follows: The current head position of the Read/Write head is 53 and will move in the right direction. Calculate the total number of track movements of the Read/Write head using the C-SCAN algorithm. 
Total head movements
= (65 - 53) + (98 - 65) + (122 - 98) + (124 - 122) + (183 - 124) + (199 - 183) + (199 - 0)
   + (10 - 0) + (40 - 10)

= 395
 Advantages Here are the following advantages of the C-SCAN Scheduling Algorithm, such as: The waiting time for the cylinders just visited by the head is reduced compared to the SCAN Algorithm. It provides a uniform waiting time. It provides a better response time. Disadvantages C-SCAN Scheduling Algorithm also has some disadvantages, such as: It causes more seek movements as compared to the SCAN Algorithm. And it causes the head to move till the end of the disk even if there are no requests to be serviced. What is C-LOOK Disk Scheduling Algorithm? C-LOOK is the modified version of both LOOK and C-SCAN algorithms. In this algorithm, the head starts from the first request in one direction and moves towards the last request at another end, serving all requests in between. After reaching the last request in one end, the head jumps in another direction, moves towards the remaining requests, and then satisfies them in the same direction as before. Unlike C-SCAN, the head pointer will move till the end request of the disk. For example: Consider a disk with 200 tracks (0-199) and the disk queue having I/O requests in the following order as follows: The current head position of the Read/Write head is 53 and will move in the right direction. Calculate the total number of track movements of the Read/Write head using the C-LOOK algorithm. 
Total head movements
= (65 - 53) + (98 - 65) + (122 - 98) + (124 - 122) + (183 - 124) + (183 - 10) + (40 - 10)
= 333
 Advantages of C-LOOK Disk Scheduling Algorithm Here are the following advantages of the C-LOOK Disk Scheduling Algorithm, such as: It does not cause the head to move till the ends of the disk when there are no requests to be serviced. It reduces the waiting time for the cylinders just visited by the head. It provides better performance as compared to the LOOK Algorithm. It does not lead to starvation. It provides low variance in response time and waiting time. Disadvantages of CLOOK Disk Scheduling Algorithm CLOOK Disk Scheduling Algorithm has some disadvantages, such as: There is an overhead of finding the end requests. Difference between C-LOOK and C-SCAN Disk Scheduling Algorithm These algorithms are so similar but here are the following differences between C-LOOK and C-SCAN disk scheduling algorithm, such as: C-LOOK Disk Scheduling Algorithm C-SCAN Disk Scheduling Algorithm C-LOOK algorithm has the best performance in all disk scheduling algorithms. Whereas C-SCAN lags in performance when compared to C-LOOK C-LOOK algorithm can handle requests more effectively than C-SCAN. Here handling of requests is not so good as compared to the C-LOOK algorithm. C-LOOK provides low variance in response time and waiting time. C-SCAN provides uniform waiting time and response time. In the C-LOOK algorithm, there is an overhead of finding the end requests. C-SCAN algorithm causes more seek time as compared to C-LOOK. In the above example of the C-LOOK algorithm, the head moves from 53 and serves all requests in the right direction until it reaches the last request in one end. Then it jumps to the remaining requests and serves them in the right direction only. In the above example of the C-SCAN algorithm, the head moves from 53 and serves all requests in the right direction until it reaches the other end. Then it jumps to the opposite end and serves the remaining requests in the right direction only. It gives a lower variance of response time than LOOK at the expense of throughput. It maintains a high level of throughput while further limiting variance of response times by avoiding discrimination against the innermost and outermost cylinders. Next Topic Rotational Latency vs Disk Access Time in Disk Scheduling ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
