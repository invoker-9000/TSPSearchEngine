SQL CASE - javatpoint ? SCROLL TO TOP Home SQL PL/SQL MySQL MongoDB PostgreSQL SQL Server Oracle Cassandra SQLite DBMS Python Java Aptitude Interview Q Oracle Training SQL Tutorial What is SQL SQL Syntax SQL Data Types SQL Operators SQL Database SQL CREATE Database SQL DROP Database SQL RENAME Database SQL SELECT Database SQL Table What is Table SQL CREATE TABLE SQL DROP TABLE SQL DELETE TABLE SQL RENAME TABLE SQL TRUNCATE TABLE SQL COPY TABLE SQL TEMP TABLE SQL ALTER TABLE SQL Select SELECT Statement SQL SELECT UNIQUE SQL SELECT DISTINCT SQL SELECT COUNT SQL SELECT TOP SQL SELECT FIRST SQL SELECT LAST SQL SELECT RANDOM SQL SELECT IN SQL SELECT Multiple SQL SELECT DATE SQL SELECT SUM SQL SELECT NULL SQL Clause SQL WHERE SQL AND SQL OR SQL WITH SQL AS SQL HAVING Clause SQL Order By ORDER BY Clause ORDER BY ASC ORDER BY DESC ORDER BY RANDOM ORDER BY LIMIT ORDER BY Multiple Cols SQL Insert INSERT Statement INSERT INTO Values INSERT INTO SELECT INSERT Multiple Rows SQL Update UPDATE Statement SQL UPDATE JOIN SQL UPDATE DATE SQL Delete DELETE Statement SQL DELETE TABLE SQL DELETE ROW SQL DELETE All Rows DELETE Duplicate Rows SQL DELETE DATABASE SQL DELETE VIEW SQL DELETE JOIN SQL Join SQL JOIN SQL Outer Join SQL Left Join SQL Right Join SQL Full Join SQL Cross Join SQL Keys Primary Key Foreign Key Composite Key Unique Key Alternate Key Difference SQL vs NoSQL IN vs EXISTS Group By vs Order By WHERE vs HAVING Where condition in SQL SQL Injection SQL Injection Misc SQL Formatter SQL group by SQL add/drop/update column operation SQL CAST Function SQL Comments SQL CONCAT Function CTE SQL How to use distinct in SQL Joining Three or More Tables in SQL What is Web SQL How to create functions in SQL How to run SQL Script How to Delete Duplicate Rows in SQL Nth Highest salary 12 Codd's Rules SQL EXCEPT Types of SQL JOIN Change datatype of column in SQL SQL Auto Increment SQL Like Commit and Rollback in SQL SQL Concatenate SQL get month from the date Savepoint in SQL SQL ORDER BY DATE TIME Datatype in SQL SQL BETWEEN SQL CRUD Operations SQL INDEX Scalar Functions in SQL SET Operators in SQL Types of SQL Commands TCL Commands in SQL SQL Subquery SQL View Constraints in SQL Pattern Matching in SQL SQL Date Functions DDL Commands in SQL DML Commands in SQL SQL CASE SQL Inner Join SQL IN Operator Check Constraint in SQL SQL CLAUSES SQL LOGICAL OPERATORS SQL MCQ SQL MCQ PL/SQL Tutorial PL/SQL Tutorial Interview SQL Interview PL/SQL Interview Quiz SQL Quiz next ? ? prev SQL CASE The CASE is a statement that operates if-then-else type of logical queries. This statement returns the value when the specified condition evaluates to True. When no condition evaluates to True, it returns the value of the ELSE part. When there is no ELSE part and no condition evaluates to True, it returns a NULL value. In Structured Query Language, CASE statement is used in SELECT, INSERT, and DELETE statements with the following three clauses: WHERE Clause ORDER BY Clause GROUP BY Clause This statement in SQL is always followed by at least one pair of WHEN and THEN statements and always finished with the END keyword. The CASE statement is of two types in relational databases: Simple CASE statement Searched CASE statement Syntax of CASE statement in SQL 
CASE <expression>

WHEN condition_1 THEN statement_1
WHEN condition_2 THEN statement_2 …….
WHEN condition_N THEN statement_N

ELSE result

END;
 Here, the CASE statement evaluates each condition one by one. If the expression matches the condition of the first WHEN clause, it skips all the further WHEN and THEN conditions and returns the statement_1 in the result. If the expression does not match the first WHEN condition, it compares with the seconds WHEN condition. This process of matching will continue until the expression is matched with any WHEN condition. If no condition is matched with the expression, the control automatically goes to the ELSE part and returns its result. In the CASE syntax, the ELSE part is optional. In Syntax, CASE and END are the most important keywords which show the beginning and closing of the CASE statement. Examples of CASE statement in SQL Let's take the Student_Details table, which contains roll_no, name, marks, subject, and city of students. Roll_No Stu_Name Stu_Subject Stu_Marks Stu_City 2001 Akshay Science 92 Noida 2002 Ram Math 49 Jaipur 2004 Shyam English 52 Gurgaon 2005 Yatin Hindi 45 Lucknow 2006 Manoj Computer 70 Ghaziabad 2007 Sheetal Math 82 Noida 2008 Parul Science 62 Gurgaon 2009 Yogesh English 42 Lucknow 2010 Ram Computer 88 Delhi 2011 Shyam Hindi 35 Kanpur Example 1: The following SQL statement uses single WHEN and THEN condition to the CASE statement: 
SELECT Roll_No, Stu_Name, Stu_Subject, Stu_marks,
CASE
WHEN Stu_Marks >= 50 THEN 'Student_Passed'
ELSE 'Student_Failed'
END AS Student_Result
FROM Student_Details;
 Explanation of above query: Here, the CASE statement checks that if the Stu_Marks is greater than and equals 50, it returns Student_Passed otherwise moves to the ELSE part and returns Student_Failed in the Student_Result column. Output: Roll_No Stu_Name Stu_Subject Stu_Marks Student_Result 2001 Akshay Science 92 Student_Passed 2002 Ram Math 49 Student_Failed 2004 Shyam English 52 Student_Passed 2005 Yatin Hindi 45 Student_Failed 2006 Manoj Computer 70 Student_Passed 2007 Sheetal Math 82 Student_Passed 2008 Parul Science 62 Student_Passed 2009 Yogesh English 42 Student_Failed 2010 Ram Computer 88 Student_Passed 2011 Shyam Hindi 35 Student_Failed Example 2: The following SQL statement adds more than one WHEN and THEN condition to the CASE statement: 
SELECT Roll_No, Stu_Name, Stu_Subject, Stu_marks,
CASE
WHEN Stu_Marks >= 90 THEN 'Outstanding'
WHEN Stu_Marks >= 80 AND Stu_Marks < 90 THEN 'Excellent'
WHEN Stu_Marks >= 70 AND Stu_Marks < 80 THEN 'Good'
WHEN Stu_Marks >= 60 AND Stu_Marks < 70 THEN 'Average'
WHEN Stu_Marks >= 50 AND Stu_Marks < 60 THEN 'Bad'
WHEN Stu_Marks < 50 THEN 'Failed'
END AS Stu_Remarks
FROM Student_Details;
 Explanation of above query: Here, the CASE statement checks multiple WHEN and THEN conditions one by one. If the value of Stu_Marks column is greater than or equals to 90, it returns Outstanding otherwise moves to the further WHEN and THEN conditions. If none of the conditions is matched with the Student_Details table, CASE returns the NULL value in the Stu_Remarks column because there is no ELSE part in the query. Output: Roll_No Stu_Name Stu_Subject Stu_Marks Stu_Remarks 2001 Akshay Science 92 Outstanding 2002 Ram Math 49 Failed 2004 Shyam English 52 Bad 2005 Yatin Hindi 45 Failed 2006 Manoj Computer 70 Good 2007 Sheetal Math 82 Excellent 2008 Parul Science 62 Average 2009 Yogesh English 42 Failed 2010 Ram Computer 88 Excellent 2011 Shyam Hindi 35 Failed Example 3: Let's take another Employee_Details table which contains Emp_ID, Emp_Name, Emp_Dept, and Emp_Salary. Emp_Id Emp_Name Emp_Dept Emp_Salary 1 Akshay Finance 9000 2 Ram Marketing 4000 3 Shyam Sales 5000 4 Yatin Coding 4000 5 Manoj Marketing 5000 1 Akshay Finance 8000 2 Ram Coding 6000 3 Shyam Coding 4000 4 Yatin Marketing 8000 5 Manoj Finance 3000 The following SQL query uses GROUP BY clause with CASE statement: 
SELECT Emp_Id, Emp_Name, Emp_Dept, sum(Emp_Salary) as Total_Salary,
CASE
WHEN SUM(Emp_Salary) >= 10000 THEN 'Increment'
ELSE 'Constant'
END AS Emp_Remarks
FROM Employee_Details
GROUP BY Emp_id, Emp_Name;
 Output: Emp_Id Emp_Name Emp_Dept Total_Salary Emp_Remarks 1 Akshay Finance 17000 Increment 2 Ram Marketing 9000 Decrement 3 Shyam Sales 10000 Increment 4 Yatin Coding 12000 Increment 5 Manoj Marketing 8000 Decrement Example 4: In this example, we use the ORDER BY clause with a CASE statement in SQL: Let's take another Employee_Details table which contains Emp_ID, Emp_Name, Emp_Dept, and Emp_Age. We can check the data of Employee_Details by using the following query in SQL: 
Select * From Employee_Details;
 Output: Emp_Id Emp_Name Emp_Dept Emp_Age 1 Akshay Finance 23 2 Ram Marketing 24 3 Balram Sales 25 4 Yatin Coding 22 5 Manoj Marketing 23 6 Sheetal Finance 24 7 Parul Finance 22 8 Yogesh Coding 25 9 Naveen Marketing 22 10 Tarun Finance 23 The following SQL query shows all the details of employees in the ascending order of employee names: 
SELECT * FROM Employee_Details 
ORDER BY Emp_Name; 
 Output: Emp_Id Emp_Name Emp_Dept Emp_Age 1 Akshay Finance 23 3 Balram Sales 25 5 Manoj Marketing 23 9 Naveen Marketing 22 7 Parul Finance 22 2 Ram Marketing 24 6 Sheetal Finance 24 10 Tarun Finance 23 4 Yatin Coding 22 8 Yogesh Coding 25 If you want to show those employees at the top who work in the Coding Department, then for this operation, you have to use single WHEN and THEN statement in the CASE statement as shown in the following query: 
SELECT * FROM Employee_Details
ORDER BY CASE WHEN Emp_Dept = 'Coding' THEN 0
ELSE 1 END, Emp_Name;
 Output: Emp_Id Emp_Name Emp_Dept Emp_Age 4 Yatin Coding 22 8 Yogesh Coding 25 1 Akshay Finance 23 3 Balram Sales 25 5 Manoj Marketing 23 9 Naveen Marketing 22 7 Parul Finance 22 2 Ram Marketing 24 6 Sheetal Finance 24 10 Tarun Finance 23 Next Topic SQL Inner Join ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
