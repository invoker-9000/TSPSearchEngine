Chatbot in Python - Javatpoint ? SCROLL TO TOP Home Python If Else For Loop Function Array String Regex List Set Tuple Dictionary Programs Numpy Interview Questions Python Tutorial Python Tutorial Python Features Python History Python Applications Python Install Python Example Python Variables Python Data Types Python Keywords Python Literals Python Operators Python Comments Python If else Python Loops Python For Loop Python While Loop Python Break Python Continue Python Pass Python Strings Python Lists Python Tuples Python List Vs Tuple Python Sets Python Dictionary Python Functions Python Built-in Functions Python Lambda Functions Python Files I/O Python Modules Python Exceptions Python Date Python Regex Python Sending Email Read CSV File Write CSV File Read Excel File Write Excel File Python Assert Python List Comprehension Python Collection Module Python Math Module Python OS Module Python Random Module Python Statistics Module Python Sys Module Python IDEs Python Arrays Command Line Arguments Python Magic Method Python Stack & Queue PySpark MLlib Python Decorator Python Generators Web Scraping Using Python Python JSON Python Itertools Python Multiprocessing How to Calculate Distance between Two Points using GEOPY Gmail API in Python How to Plot the Google Map using folium package in Python Grid Search in Python Python High Order Function nsetools in Python Python program to find the nth Fibonacci Number Python OpenCV object detection Python SimpleImputer module Second Largest Number in Python Python OOPs Python OOPs Concepts Python Object Class Python Constructors Python Inheritance Abstraction in Python Python MySQL Environment Setup Database Connection Creating New Database Creating Tables Insert Operation Read Operation Update Operation Join Operation Performing Transactions Python MongoDB Python MongoDB Python SQLite Python SQLite Python Questions How to install Python in Windows How to reverse a string in Python How to read CSV file in Python How to run Python Program How to take input in Python How to convert list to string in Python How to append element in the list How to compare two lists in Python How to convert int to string in Python How to create a dictionary in Python How to create a virtual environment in Python How to declare a variable in Python How to install matplotlib in Python How to install OpenCV in Python How to print in same line in Python How to read JSON file in Python How to read a text file in Python How to use for loop in Python Is Python scripting language How long does it take to learn Python How to concatenate two strings in Python How to connect Database in Python How to convert list to dictionary in Python How to declare a global variable in Python How to reverse a number in Python What is an object in Python Which is the fastest implementation of Python How to clear Python shell How to create a DataFrames in Python How to develop a game in Python How to install Tkinter in Python How to plot a graph in Python How to print pattern in Python How to remove an element from a list in Python How to Round number in Python How to sort a dictionary in Python Strong Number in Python How to Convert Text to Speech in Python Bubble Sort in Python Logging in Python Insertion Sort in Python Binary Search in Python Linear Search in Python Python vs Scala Queue in Python Stack in Python Heap Sort in Python Palindrome program in python Program of Cumulative sum in python Merge Sort in Python Python Matrix Python Unit Testing Forensics & Virtualization Best Books to Learn Python Best Books to Learn Django GCD of two number in python Python Program to generate a Random String How to One Hot Encode Sequence Data in Python How to write square root in Python Pointer in Python Python 2D array Python Memory Management Python Libraries for Data Visualization How to call a function in Python Git Modules in Python Top Python Frameworks for Gaming Python Audio Modules Wikipedia Module in Python Python random randrange() Permutation and Combination in Python Getopt module in Python Merge two Dictionaries in Python Multithreading in Python 3 Static in Python How to get the current date in Python argparse in Python Python tqdm Module Caesar Cipher in Python Tokenizer in Python How to add two lists in Python Shallow Copy and Deep Copy in Python Atom Python Contains in Python Label Encoding in Python Django vs. Node JS Python Frameworks How to create a vector in Python using NumPy Pickle Module of Python How to convert Bytes to string in Python Python Program to Find Anagram How to convert List to Set Python vs JavaScript Python Holidays Module FuzzyWuzzy Python Library Dask Python Dask Python (Part 2) Mode in Python Menu-Driven Programs in Python Python Array vs. List What is duck typing in Python PEP 8 in Python Python User Groups Basic Commands in Python F String in Python How Brython Works How to use Brython in the Browser Arima Model in Python Python Modulus Operator MATLAB vs. Python Method Resolution Order in Python Monkey Patching in Python Python __call__ method Python heapq module Python Substring Project ideas for Python Beginners Python Faker Fizz-Buzz Program in Python Tabula Python Python Program to Print Prime Factor of Given Number Python Program to Print Pascal Triangle NamedTuple in Python OrderedDict in Python T-Test in Python Python return statement Getter and Setter in Python Enum class in Python Destructors in Python Curve Fit in Python Converting CSV to JSON in Python Underscore (_) in Python Set vs List in Python Locating and Executing Modules Flatten List in Python Pair Plot in Python Data Hiding in Python Python Program to Find Intersection of Two Lists How to Create Requirements.txt File in Python Tic-Tac-Toe in Python Python Asynchronous Programming - asyncio and await Python main() function strftime() function in Python Verbose Flag in Python Regex Python AST Module Python Requests Module - HTTP Request Shutil Module in Python Python epoch to Datetime Python del Statement Looping technique in Python Metaprogramming with Metaclasses in Python Precision Handling in Python Python Join List strip() function in Python Gradient Descent Algorithm Prettytable in Python Sentiment Analysis in Python Convert Python List to NumPy Arrays Traceback in Python Time clock() Method in Python Deque in Python Dictionary Comprehension in Python Python Data Analytics Python seek() Method Ternary Operator in Python How to Calculate the Area of the Circle using Python How to Write in Text File using Python Python KeyError Python super() Function max() function in Python Fraction Module in Python Popular Python Framework to Build API How to Check Python version Python %s - String Formatting Python seaborn Library Countplot in Python range() Vs. Xrange() Python Wordcloud Package in Python Convert dataframe into list ANOVA Test in Python Python program to find compound interest Ansible in Python Python Important Tips and Tricks Python Coroutines Double Underscores in Python re.search() VS re.findall() in Python Regex How to install statsmodels in Python Cos in Python vif in Python __add__ Method in Python Ethical Hacking with Python Class Variable vs Instance Perfect Number in Python EOL in Python Python Program to convert Hexadecimal String to Decimal String Different Methods in Python for Swapping Two Numbers without using third variable How to Change Plot Size in Matplotlib How to Get the Zip Code in Python Eel in Python Assignment Operators in Python Speech Recognition python Yield vs Return in Python Graphene Python Name Mangling in Python Python combination without itertools Python Comprehensions InfluxDB in Python Kafka Tutorial in Python Augmented Assignment Expressions in Python Python (x,y) Software Python Event-Driven programming Python Semaphore Python sorted reverse Automorphic Number in Python sizeof in Python Python Program for accepting the strings which contains all vowels Class-based views vs Function-Based Views How to handle cookies in Django agg() function in Python Amicable Numbers in Python Context Manager in Python Create BMI Calculator using Python String to Binary in Python What is script mode in Python Best Python libraries for Machine Learning Python Program to Display Calendar of Given Year How to open URL in Python Broken Pipe Error in Python Code Template for Creating Objects in Python Python program to calculate the best time to buy and sell stock Tuple to String in Python Kadane's Algorithm in Python Loggers in Django Weather App in Django Missing Data Conundrum: Exploration and Imputation Techniques Different Methods of Array Rotation in Python What is Operator Overloading in Python Defaultdict in Python Operator Module in Python Spinner Widget in the kivy Library of Python Number Plate Recognition using Python Obfuscating a Python program Convert string to dictionary in Python Convert string to JSON in Python DBSCAN algorithm in Python How to Write a Code for Printing the Python Exception/Error Hierarchy Principal Component Analysis (PCA) with Python Python Program to Find Number of Days Between Two Given Dates Object Recognition using Python Python VLC module Set to list in Python String to int in Python Internet of Things with Python Python pysftp module Amazing hacks of Python Average of list in Python Check Installed Modules in Python choice() in Python Convert List to dataframe in Python Convert String to Float in Python Decorators with Parameters in Python Dynamic Typing in Python Fabs in Python How to Remove Decimal in Python Python Closure Python Glob Module Writing a Python Module Modules vs Packages in Python SNMP module in Python Average of list in Python Append vs Extend vs Insert in Python How to Remove Duplicates from a list in Python Remove Multiple Characters from a String in Python Shuffle in Python floor() and ceil() Functions in Python sqrt(): Math Function of Python Python yfinance Module Difflib module in Python Convert the Column Type from String to Datetime Format in Pandas DataFrame Python wxPython Module Random Uniform Python Relational Operators in Python String to List in Python Chatbot in Python How to Convert float to int in Python Multiply All Elements in list of Python module vs function in Python Reverse a tuple in Python Tuple to Dictionary in Python datetime.timedelta() Function of Python Python Bio Module Python Dash Module How to Select rows in Pandas DataFrame Based on Conditions Typecasting in Python Dateutil module in Python Getpass module in Python Python Wand library Generate a QR Code using Python Best Python PDF Library Python Cachetools Module Python Cmdparser Module Python Dash module Python Emoji Module Python Nmap Module Python PyLab Module Working with PDF files in Python PDF Handling in Python Manipulating PDF using Python List All Functions from a Python Module Python list of Dictionaries Python Shelve Module Creating Interactive PDF forms using Python Python Newspaper Module How to Connect Wi-Fi using Python Best Python Libraries used for Ethical Hacking Python Tkinter (GUI) Python Tkinter Tkinter Button Tkinter Canvas Tkinter Checkbutton Tkinter Entry Tkinter Frame Tkinter Label Tkinter Listbox Tkinter Menubutton Tkinter Menu Tkinter Message Tkinter Radiobutton Tkinter Scale Tkinter Scrollbar Tkinter Text Tkinter Toplevel Tkinter Spinbox Tkinter PanedWindow Tkinter LabelFrame Tkinter MessageBox Python Web Blocker Introduction Building Python Script Script Deployment on Linux Script Deployment on Windows Python MCQ Python MCQ Python MCQ Part 2 Related Tutorials NumPy Tutorial Django Tutorial Flask Tutorial Pandas Tutorial Pytorch Tutorial Pygame Tutorial Matplotlib Tutorial OpenCV Tutorial Openpyxl Tutorial Python CGI Python Design Pattern Python Programs Python Programs next ? ? prev Chatbot in Python In the past few years, chatbots in the Python programming language have become enthusiastically admired in the sectors of technology and business. These intelligent bots are so adept at imitating natural human languages and chatting with humans that companies across different industrial sectors are accepting them. From e-commerce industries to healthcare institutions, everyone appears to be leveraging this nifty utility to drive business advantages. In the following tutorial, we will understand the chatbot with the help of the Python programming language and discuss the steps to create a chatbot in Python. Understanding the Chatbot A Chatbot is an Artificial Intelligence-based software developed to interact with humans in their natural languages. These chatbots are generally converse through auditory or textual methods, and they can effortlessly mimic human languages to communicate with human beings in a human-like way. A chatbot is considered one of the best applications of natural languages processing. We can categorize the Chatbots into two primary variants: Rule-Based Chatbots and Self-Learning Chatbots. Rule-based Chatbots:The Rule-based approach trains a chatbot to answer questions based on a list of pre-determined rules on which it was primarily trained. These set rules can either be pretty simple or quite complex, and we can use these rule-based chatbots to handle simple queries but not process more complicated requests or queries. Self-learning Chatbots:Self-learning chatbots are chatbots that can learn on their own. These leverage advanced technologies such as Artificial Intelligence (AI) and Machine Learning (ML) to train themselves from behaviours and instances. Generally, these chatbots are quite smarter than rule-based bots. We can classify the Self-learning chatbots furtherly into two categories - Retrieval-based Chatbots and Generative Chatbots. Retrieval-based Chatbots:A retrieval-based chatbot works on pre-defined input patterns and sets responses. Once the question or pattern is inserted, the chatbot utilizes a heuristic approach to deliver the relevant response. The model based on retrieval is extensively utilized to design and develop goal-oriented chatbots using customized features such as the flow and tone of the bot in order to enhance the experience of the customer. Generative Chatbots:Unlike retrieval-based chatbots, generative chatbots are not based on pre-defined responses - they leverage seq2seq neural networks. This is constructed on the concept of machine translation, where the source code is converted from one language to another language. In the seq2seq approach, the input is changed into an output. The first chatbot named ELIZA was designed and developed by Joseph Weizenbaum in 1966 that could imitate the language of a psychotherapist in only 200 lines of code. But as the technology gets more advance, we have come a long way from scripted chatbots to chatbots in Python today. Chatbot in present Generation Today, we have smart Chatbots powered by Artificial Intelligence that utilize natural language processing (NLP) in order to understand the commands from humans (text and voice) and learn from experience. Chatbots have become a staple customer interaction utility for companies and brands that have an active online existence (website and social network platforms). With the help of Python, Chatbots are considered a nifty utility as they facilitate rapid messaging between the brand and the customer. Let us think about Microsoft's Cortana, Amazon's Alexa, and Apple's Siri. Aren't these chatbots wonderful? It becomes quite interesting to learn how to create a chatbot using the Python programming language. Fundamentally, the chatbot utilizing Python is designed and programmed to take in the data we provide and then analyze it using the complex algorithms for Artificial Intelligence. It then delivers us either a written response or a verbal one. Since these bots can learn from experiences and behavior, they can respond to a large variety of queries and commands. Although chatbot in Python has already started to rule the tech scenario at present, chatbots had handled approximately 85% of the customer-brand interactions by 2020 as per the prediction of Gartner. In light of the increasing popularity and adoption of chatbots in the industry, we can increase the market value by learning how to create a chatbot in Python - among the most extensively utilized programming languages globally. So, let's get begun! Understanding the ChatterBot Library ChatterBot is a Python library that is developed to provide automated responses to user inputs. It makes utilization of a combination of Machine Learning algorithms in order to generate multiple types of responses. This feature enables developers to construct chatbots using Python that can communicate with humans and provide relevant and appropriate responses. Moreover, the ML algorithms support the bot to improve its performance with experience. Another amazing feature of the ChatterBot library is its language independence. The library is developed in such a manner that makes it possible to train the bot in more than one programming language. Understanding the working of the ChatterBot library When a user inserts a particular input in the chatbot (designed on ChatterBot), the bot saves the input and the response for any future usage. This information (of gathered experiences) allows the chatbot to generate automated responses every time a new input is fed into it. The program picks the most appropriate response from the nearest statement that matches the input and then delivers a response from the already known choice of statements and responses. Over time, as the chatbot indulges in more communications, the precision of reply progresses. Creating a Chatbot using Python We will follow a step-by-step approach and break down the procedure of creating a Python chat. We will begin building a Python chatbot by importing all the required packages and modules necessary for the project. We will also initialize different variables that we want to use in it. Moreover, we will also be dealing with text data, so we have to perform data preprocessing on the dataset before designing an ML model. This is where tokenizing supports text data - it converts the large text dataset into smaller, readable chunks (such as words). Once this process is complete, we can go for lemmatization to transform a word into its lemma form. Then it generates a pickle file in order to store the objects of Python that are utilized to predict the responses of the bot. Another major section of the chatbot development procedure is developing the training and testing datasets. Now that we have understood the fundamental concepts of chatbot development we need in Python, let us start with the actual process! Preparing the Dependencies The initial step to create a chatbot in Python using the ChatterBot library is to install the library in the system. We can also use a new Python virtual environment for the library installation as a good practice. We can install the library using the pip installer with the help of the following command in a Command prompt or Python terminal: Syntax: 
$ pip install chatterbot
$ pip install chatterbot_corpus
 We can also install the latest development version of the ChatterBot library directly from GitHub. For this, we will have to use the following command: Syntax: 
$ pip install git+git://github.com/gunthercox/ChatterBot.git@master
 If some of us would like to upgrade the library, we can use the following command Syntax: 
$ pip install --upgrade chatterbot_corpus
$ pip install --upgrade chatterbot
 Now that the setup is ready, we can move on to the next step in order to create a chatbot using the Python programming language. Importing the Classes The second step in the Python chatbot development procedure is to import the required classes. Let us consider the following snippet of code to understand the same. File: my_chatbot.py 
# importing the required modules
from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
 Explanation: In the above snippet of code, we have imported two classes - ChatBot from chatterbot and ListTrainer from chatterbot.trainers. Creating and Training the Chatbot The next step is to create a chatbot using an instance of the class "ChatBot" and train the bot in order to improve its performance. Training the bot ensures that it has enough knowledge, to begin with, particular replies to particular input statements. Let us consider the following snippet of code for the same. File: my_chatbot.py 
# creating a chatbot
myBot = ChatBot(
    name = 'Sakura',
    read_only = True,
    logic_adapters = [
        'chatterbot.logic.MathematicalEvaluation',
        'chatterbot.logic.BestMatch'
        ]
        )
 Explanation: In the above snippet of code, we have defined a variable that is an instance of the class "ChatBot". We have included various parameters within the class. The first parameter, 'name', represents the name of the Python chatbot. Another parameter called 'read_only' accepts a Boolean value that disables (TRUE) or enables (FALSE) the ability of the bot to learn after the training. We have also included another parameter named 'logic_adapters' that specifies the adapters utilized to train the chatbot. While the 'chatterbot.logic.MathematicalEvaluation' helps the chatbot solve mathematics problems, the ` helps it select the perfect match from the list of responses already provided. Since we have to provide a list of responses, we can perform it by specifying the lists of strings that we can use to train the Python chatbot and find the perfect match for a certain query. Let us consider the following example of responses we can train the chatbot using Python to learn. File: my_chatbot.py 
# training the chatbot
small_convo = [
    'Hi there!',
    'Hi',
    'How do you do?',
    'How are you?',
    'I\'m cool.',
    'Always cool.',
    'I\'m Okay',
    'Glad to hear that.',
    'I\'m fine',
    'I feel awesome',
    'Excellent, glad to hear that.',
    'Not so good',
    'Sorry to hear that.',
    'What\'s your name?',
    ' I\'m Sakura. Ask me a math question, please.'
    ]

math_convo_1 = [
    'Pythagorean theorem',
    'a squared plus b squared equals c squared.'
    ]

math_convo_2 = [
    'Law of Cosines',
    'c**2 = a**2 + b**2 - 2*a*b*cos(gamma)'
    ]
 Explanation: In the above snippet of code, we have defined some list of responses in order to train the chatbot. We can also create and train the chatbot by simple typing an instance of "ListTrainer" and providing it with a list of strings as shown below: File: my_chatbot.py 
# using the ListTrainer class
list_trainee = ListTrainer(myBot)
for i in (small_convo, math_convo_1, math_convo_2):
    list_trainee.train(i)
 Explanation: In the above snippet of code, we have created an instance of the ListTrainer class and used the for-loop to iterate through each item present in the lists of responses. Now, the Python chatbot is ready to communicate. Communicating with the Python chatbot We can use the get_response() function in order to interact with the Python chatbot. Let us consider the following execution of the program to understand it. Output: # starting a conversation
>>> print(myBot.get_response("Hi, there!"))
Hi
>>> print(myBot.get_response("What's your name?"))
I'm Sakura. Ask me a math question, please.
>>> print(myBot.get_response("Do you know Pythagorean theorem"))
a squared plus b squared equals c squared.
>>> print(myBot.get_response("Tell me the formula of law of cosines"))
c**2 = a**2 + b**2 - 2*a*b*cos(gamma)
 Explanation: The above execution of the program tells us that we have successfully created a chatbot in Python using the chatterbot library. However, it is also necessary to understand that the chatbot using Python might not know how to answer all the queries. Since its knowledge and training are still very limited, we have to provide it time and give more training data to train it further. Training the Python Chatbot using a Corpus of Data As we move to the final step of creating a chatbot in Python, we can utilize a present corpus of data to train the Python chatbot even further. Let us consider the following example of training the Python chatbot with a corpus of data given by the bot itself. File: my_chatbot.py 
from chatterbot.trainers import ChatterBotCorpusTrainer
corpus_trainee = ChatterBotCorpusTrainer(myBot)
corpus_trainee.train('chatterbot.corpus.english')
 Explanation: In the above snippet of code, we have imported the ChatterBotCorpusTrainer class from the chatterbot.trainers module. We created an instance of the class for the chatbot and set the training language to English. Moreover, from the last statement, we can observe that the ChatterBot library provides this functionality in multiple languages. Thus, we can also specify a subset of a corpus in a language we would prefer. Hence, our chatbot in Python has been created successfully. A complete code for the Python chatbot project is shown below. Complete Project Code File: my_chatbot.py 
# importing the required modules
from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
from chatterbot.trainers import ChatterBotCorpusTrainer

# creating a chatbot
myBot = ChatBot(
    name = 'Sakura',
    read_only = True,
    logic_adapters = [
        'chatterbot.logic.MathematicalEvaluation',
        'chatterbot.logic.BestMatch'
        ]
        )

# training the chatbot
small_convo = [
    'Hi there!',
    'Hi',
    'How do you do?',
    'How are you?',
    'I\'m cool.',
    'Always cool.',
    'I\'m Okay',
    'Glad to hear that.',
    'I\'m fine',
    'I feel awesome',
    'Excellent, glad to hear that.',
    'Not so good',
    'Sorry to hear that.',
    'What\'s your name?',
    ' I\'m Sakura. Ask me a math question, please.'
    ]

math_convo_1 = [
    'Pythagorean theorem',
    'a squared plus b squared equals c squared.'
    ]

math_convo_2 = [
    'Law of Cosines',
    'c**2 = a**2 + b**2 - 2*a*b*cos(gamma)'
    ]

# using the ListTrainer class
list_trainee = ListTrainer(myBot)
for i in (small_convo, math_convo_1, math_convo_2):
    list_trainee.train(i)

# using the ChatterBotCorpusTrainer class
corpus_trainee = ChatterBotCorpusTrainer(myBot)
corpus_trainee.train('chatterbot.corpus.english')
 Next Topic How to Convert float to int in Python ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
