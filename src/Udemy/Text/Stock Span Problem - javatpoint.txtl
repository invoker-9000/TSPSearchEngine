Stock Span Problem - javatpoint ? SCROLL TO TOP Home Data Structure C C++ C# Java SQL HTML CSS JavaScript Ajax Android Cloud Design Pattern Quiz Projects Interview Q Comment Forum DS Tutorial DS Tutorial DS Introduction DS Algorithm Asymptotic Analysis DS Pointer DS Structure DS Array DS Array 2D Array DS Linked List Linked List Types of Linked List Singly Linked List Doubly Linked List Circular Linked List Circular Doubly List Skip list in DS DS Stack DS Stack Array Implementation Linked List Implementation DS Queue DS Queue Types of Queues Array Representation Linked List Representation Circular Queue Deque Priority Queue DS Tree DS Tree Binary Tree Binary Search Tree AVL Tree B Tree B+ Tree DS Graph DS Graph Graph Implementation BFS Algorithm DFS Algorithm Spanning Tree DS Searching Linear Search Binary Search DS Sorting Bubble Sort Bucket Sort Comb Sort Counting Sort Heap Sort Insertion Sort Merge Sort Quick Sort Radix Sort Selection Sort Shell Sort Bitonic Sort Cocktail Sort Cycle Sort Tim Sort Differences Linear vs non-linear Array vs linked list Stack vs queue Linear vs Circular Queue Linear Search vs Binary Search Singly Linked List vs Doubly Linked List Binary vs Binary Search Tree Tree vs Graph Binary Search tree vs AVL tree Red Black Tree vs AVL tree B tree vs B+ tree Quick Sort vs Merge Sort BFS vs DFS Stack vs Heap Bubble sort vs. Selection sort Stack vs Array Full Binary Tree vs Complete Binary Tree Binary Tree vs B Tree Primitive vs non-primitive data structure Data types vs data structure Misc Trie Data Structure Heap Data Structure Splay Tree Fundamental of the DS Hash Table Preorder Traversal Tree Traversal Implementation of Queue using Stacks Implementation of Stack using Queue Binomial Heap Postorder Traversal Sparse Matrix Detect loop in a Linked list Inorder Traversal Convert Infix to Postfix notation Convert infix to prefix notation Conversion of Prefix to Postfix expression Conversion of Postfix to Prefix expression Remove the loop in a Linked List Implement two stacks in an array Reverse a stack using recursion Detect cycle in a directed graph Optimal Binary Search Tree Priority Queue using Linked list Balanced Binary Search Tree Boundary Traversal of Binary tree Diagonal Traversal of Binary Tree Vertical Traversal of a Binary tree Graph Algorithms Time Complexity of Sorting Algorithms Applications of Stack in Data Structure Dictionary Data Structure Structured Data and Unstructured Data List Data Structure Types of Tree in Data Structure Abstract data type in data structure Disjoint set data structure Dynamic Data Structure Hash Function in Data Structure Complete Binary Tree Threaded Binary Tree Diameter of Binary Tree Height of Binary Tree Inorder Tree Traversal without Stack Enumeration of Binary Trees Maximum Width of a Binary Tree Types of Graph in Data Structure Primitive Data Type Semi-Structured Data Advance Data Structures Sort an Array of 0's, 1's, and 2's Stock Span Problem Implementation of Deque by Circular Array Rotate Operation in Linked List DS MCQ Data Structure MCQ next ? ? prev Stock Span Problem Stock Span Problem is a financial problem. In this problem, we are provided with the ' n ' number of stocks with their corresponding prices. These prices of the stocks are daily, and we just need to compare the stock prices. In this stock span problem, we need to determine the number of stocks that have an equal or lesser price than the current stock until we reach the stock greater than the current stock. This problem is mainly asked in the interviews of Amazon and Google, and the candidate must answer this problem in the duration of time through programming. The term stock span is defined as the number of consecutive stocks before the current stock when the price of the prior stocks is less than or equal to the current stock's price. Let us understand in detail with the help of an example - Suppose we have provided an array of 10 stocks; these stocks refer to the corresponding prices of the stocks daily. Stock number Stock Prices 1 150 2 170 3 180 4 80 5 85 6 90 7 100 8 110 9 75 10 95 Now, we will store all these stock prices in an array named as - A = { 150 , 170 , 180 , 80 , 85 , 90 , 100 , 110 , 75 , 95 } Now, manually let us find out the result - 1. First of all, compare the index 0 elements with the previous element, as we know that there is nothing behind the index 0 except a garbage value, so in short, we do not need to compare and simply print 1 for index 0. 2. For index 1, we will compare the value of index 1 with itself and the previous one, i.e., from the value present at index 0. 170 <= 170 ; True 150 <= 170 ; True We will print 2 for index 1. 3. For index 2, we will compare the value of index 2 with itself and the previous indexes, i.e., from value present at index 0 and 1, until we find the greater value than the value present index 2. 180 <= 180 ; True 170 <= 180 ; True 150 <= 180 ; True We will print 3 for index 2. 4. For index 3, we will compare the value of index 3 with itself and the previous indexes, i.e., from value present at index 0, 1, and 2, until we find the greater value than the value present index 3. 80 <= 80 ; True 180 <= 80 ; False We will print 1 for index 3. 5. For index 4, we will compare the value of index 4 with itself and the previous indexes, i.e., from value present at index 0, 1, 2, and 3, until we find the greater value than the value present index 4. 85 <= 85 ; True 80 <= 85 ; True 180 <= 85 ; False We will print 2 for index 4. 6. For index 5, we will compare the value of index 5 with itself and the previous indexes, i.e., from value present at index 0, 1, 2, 3, and 4, until we find the greater value than the value present index 5. 90 <= 90 ; True 85 <= 90 ; True 80 <= 90 ; True 180 <= 90 ; False We will print 3 for index 5. 7. For index 6, we will compare the value of index 6 with itself and the previous indexes, i.e., from value present at index 0, 1, 2,3 4, 5, until we find the greater value than the value present index 6. 100 <= 100 ; True 90 <= 100 ; True 85 <= 100 ; True 80 <= 100 ; True 180 <= 100 ; False We will print 4 for index 6. 8. For index 7, we will compare the value of index 7 with itself and the previous indexes, i.e., from value present at index 0, 1, 2, 3, 4, 5, 6, until we find the greater value than the value present index 7. 110 <= 110 ; True 100 <= 110 ; True 90 <= 110 ; True 85 <= 110 ; True 80 <= 110 ; True 180 <= 110 ; False We will print 5 for index 7. 9. For index 8, we will compare the value of index 8 with itself as well as the previous indexes, i.e., from value present at index 0, 1, 2, 3, 4, 5, 6, 7, until we find the greater value than the value present index 8. 75 <= 75 ; True 110 <= 75 ; False We will print 1 for index 8. 10. For index 9, we will compare the value of index 9 with itself as well as the previous indexes, i.e., from value present at index 0, 1, 2, 3, 4, 5, 6, 7, 8, until we find the greater value than the value present index 9. 95 <= 95 ; True 75 <= 95 ; True 110 <= 95 ; False We will print 2 for index 9. Hence final output will be - Output = { 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 , 1 , 2 } Here we can observe that for an nth term, we require n comparisons, n-1 for previous ones, and 1 for itself; hence total n comparisons require nth term. Methods to solve Stock Span Problem - By using the Brute force approach, an inefficient method. By using Stack, an efficient method By using multiple stacks Linear complexity method, without using Stack Let us start solving this Stock span problem using these methods. Method # 1 Brute Force approach, an inefficient method - Although this method is not so efficient, it is very easy to implement to solve any problem. If you want to understand the basic criteria, you first implement any program using the Brute force method. Once you have succeeded in making the program, then try to find the other best alternative to solve the given problem, in much more efficient way, whose performance is also better and time complexity is also less then this method. Let us discuss the stock span problem using this method: As we have already seen, the working of the stock span problem is to find the number of stocks, which are less than or equal to the target stock. Thus, we called it finding the Span of that stock. Algorithm to implement Brute force method to solve this problem - Step 1 - Take an array named ' Stockprice ' from the user of ' n ' elements; here, elements refer to the stock, and this array contains the corresponding prices of the stocks. Also, make another array named ' span ', which stores the span values for each of the corresponding stocks. Step 2 - Make a function named ' Calspan ', this function targets to calculate the Span or number of stocks whose prices are less than or equal to the current stock until we reach the value greater than the current value. Step 3 - Calspan function will calculate the Span for each of the stocks. Step 4 - From the main function, pass Stockprice array, number of elements, and an array named Span, which stores the values of Span, calculated in the Calspan function. Step 5 - In the Calspan function, initialize the value of Span [ 0 ] = 1, as we know that the first element of the stockprice array must have a span value equal to 1 because no price is less than its value, but it is equal to itself hence its value always starts with one. Step 6 - Format the two loops; one loop is for pointing a particular stock price in an array stockprice, and another array is for calculating the span value for the pointing stock price. Step 7 - The first loop will run from 1 to n - 1 since the index 0 stock price value is always one, as described above. Step 8 - The second loop will start from n - 1, as we are comparing the values in the reverse direction of the current stock. If we get a value greater than the current stock price, we will come out of the loop and store the corresponding span value in the index ith of the span array. Step 9 - Initialize the span [ 1 ] = 1. After that, run the second loop, which compares the current pointing stock price from the stock prices. It occurs before the current stock prices and to check whether the value of the prices occurs before and less than the current stock price or not. Step 10 - If the stock price is less than the current stock price, then increment the value of Span by 1 at that particular index. Step 11 - After traversing the stock price array from 1 to n - 1, print the resulting span array from the main function. Step 12 - Finally, we will get the desired output in the result. Implementation of Stock Span Problem using Method # 1 in C Programming Language 
// C program using brute force method to calculate stock span values
#include <stdio.h>
// Fill the array Span [ ] with span values
void calSpan ( int stockprice[] , int n , int Span[] )
{
	int i , j ;
    // Span value for first day is always 1
    Span [ 0 ] = 1 ;
    // For Calculation of the span values of remaining days by linearly checking
 previous days
    for ( i = 1 ; i < n ; i++ ) 
	{
        Span [ i ] = 1 ;           // Initialize the span value as 1
 
        // Traverse the array untill we get the stockprice greater than the current stockprice
        // than stockprice [ i ]
        for ( j = i - 1 ; ( j >= 0 ) && ( stockprice [ i ] >= stockprice [ j ] ) ; j-- )
            Span [ i ]++ ;
    }
}
int main()
{
    int stockprice [ 100 ] ;
    int n , i  ;
    printf  ( " Enter number of Stocks : \n " ) ;
    scanf  ( "%d" , &n ) ;
    printf  ( " Enter prices of corresponding stocks: \n " ) ;
    for ( i = 0 ; i < n ; i++ )
    {
    	scanf ( "%d" , &stockprice [ i ] ) ;
	}
    int Span [ n ] ;
 
    // Fill the span values in array Span[]
    calSpan ( stockprice , n , Span ) ;
 printf ( " Span values are as follows for corresponding stocks -> \n " ) ;
    // print the calculated span values
   for ( i = 0 ; i  < n ; i++ )
        printf ( " %d \n ", Span [ i ] ) ;
    return 0 ;
}
 The output of the following C program for solving the Stock span problem using Method # 1 Implementation of Stock Span Problem using Method # 1 in C++ Programming Language 
// C++ program using brute force method to calculate stock span values
#include <iostream>
using namespace std; 
// Fill the array Span [ ] with span values
void calSpan ( int stockprice[] , int n , int Span[] )
{
	int i , j ;
    // Span value for the first day is always 1
    Span [ 0 ] = 1 ;
 
    // For Calculation of the span values of remaining days by linearly checking
 previous days
    for ( i = 1 ; i < n ; i++ ) 
	{
        Span [ i ] = 1 ; // Initialize the span value
 
        // Traverse the array untill we get the stockprice greater than the current stockprice
        // than stockprice [ i ]
        for ( j = i - 1 ; ( j >= 0 ) && ( stockprice [ i ] >= stockprice [ j ] ) ; j-- )
            Span [ i ]++ ;
    }
}
int main()
{
    int stockprice [ 100 ] ;
    int n , i  ;
    cout << " Enter number of Stocks : " << endl ;
    cin >> n ;
    cout << " Enter prices of corresponding stocks: " << endl ;
    for ( i = 0 ; i < n ; i++ )
    {
    	cin >> stockprice [ i ]  ;
	}
    int Span [ n ] ;
    // Fill the span values in array Span[ ] 
    calSpan ( stockprice , n , Span ) ;
    cout << " Span values are as follows for corresponding stocks -> " << endl ;
    // print the calculated span values
   for ( i = 0 ; i < n ; i++ )
        cout << Span [ i ] << endl ;
    return 0 ;
}
 The output of the following C++ program for solving the Stock span problem using Method # 1 Implementation of Stock Span Problem using Method # 1 in Java Programming Language 
// Java program for brute force method to calculate stock span values
import java.util.Scanner ;  
class Array 
{  
// Fill the array Span[] with span values
static void calSpan ( int [] stockprice , int n , int [] span )
{
	int i , j ;
	// Span value for the first day is always 1
	span  [ 0 ] = 1 ;
	 // For Calculation of the span values of remaining days by linearly checking
 previous days
	for ( i = 1 ; i < n ; i++ ) 
	{
        span [ i ] = 1 ;                   // Initialize the span value
 
        // Traverse the array untill we get the stockprice greater than the current stockprice
        // than stockprice [ i ]
        for ( j = i - 1 ; ( j >= 0 ) && ( stockprice [ i ] >= stockprice [ j ] ) ; j-- )
            span [ i ]++ ;
    }
}
public static void main ( String args[] )  
{  
 int n ;
 Scanner sc = new Scanner ( System.in ) ;
 System.out.println ( " Enter number of Stocks :  " ) ;
 n = sc.nextInt() ;
 int [] stockprice = new int[ 100 ] ;
 int [] span = new int [ 100 ] ;
 System.out.println ( " Enter prices of corresponding stocks: \n  " ) ;
 for ( int i = 0 ; i < n ; i++ )
 {
	 stockprice[ i ] = sc.nextInt() ;
 }
 // Fill the span values in array Span[ ]
 calSpan ( stockprice , n , span ) ;
 System.out.println ( " Span values are as follows for corresponding stocks -> \n " ) ;
 // print the calculated span values
  for ( int i = 0 ; i < n ; i++ )
 {
	 System.out.println ( span [ i ] ) ;
 }
}  
}  
 The output of the following Java program for solving the Stock span problem using Method # 1 Implementation of Stock Span Problem using Method # 1 in Python Programming Language 
# Python program to implement the brute force method to calculate stock span values 
# Fill the list Span [ ] with span values
def calSpan(stockprice, n, Span):     
    # Span value for the first day is always 1
    Span[0] = 1 
    # For Calculation of the span values of remaining days by linearly
 checking previous days
    for i in range(1, n, 1):
        Span[i] = 1                             # Initialize the span value as 1
        # Traverse from the left until the next element on left is
 greater than the current stockprice
        j = i - 1
        while (j>= 0) and (stockprice[i] >= stockprice[j]) :
                       Span[i] = Span[i] + 1
                       j -= 1
# Program to test above function   
print("Enter number of an stock prices: ")
n=int(input())
print("Enter prices of corresponding stocks: \n ")
i=0
stockprice=[]
Span=[None] * n
while(i<n):
  ele = int(input())
  stockprice.append(ele)
  i=i+1
# Fill the span values in list Span [ ]
calSpan(stockprice,n,Span)
# print the calculated span values
print("Span values are as follows for corresponding stocks -> \n ")
j=0
for j in Span:
  print(j)
 The output of the following Java program for solving the Stock span problem using Method # 1 Implementation of Stock Span Problem using Method # 1 in C# Programming Language 
// C# implementation for brute force method
// to calculate stock span values
using System ;
class StockProblem { 
    // method to calculate stock span values
    static void calSpan( int[] stockprice , int n , int[] Span )
    { 
        // Span value for the first day is always 1
        Span[0] = 1 ; 
        // Calculate span value of remaining
        // days by linearly checking previous
        // days
        for (int i = 1 ; i < n ; i++) 
{
            Span[i] = 1 ;                    // Initialize span value 
            // Traverse left while the next
            // element on left is smaller
 than the current stockprice 
            for ( int k = i - 1 ; ( k >= 0) && (stockprice[i] >= stockprice[k]); k--)
                Span[i]++ ;
        }
    }
    //  Function used to print elements
    // of array
    static void print(int[] Span)
    {
        string output = string.Join(" ", Span);
        Console.WriteLine(output) ;
    }    
    public static void Main()
    {
        int[] stockprice = { 100, 40, 50, 300, 420, 80 } ;
        int n = stockprice.Length ;
        int[] Span = new int[n] ;
 
        // Fill the span values in array Span[ ]
        calSpan(stockprice, n, Span) ;
 
        // print the calculated span values
        print(Span) ;
    }
}
 The output of the following C# program for solving the Stock span problem using Method # 1  1   1    2    4    5    1    
 After executing the program successfully in a specific programming language and following the Brute force algorithm using the nested traversal approach, we will get the proper result, i.e., finding out the span values for given stock prices daily. Now let us analyze the running time and performance of the algorithm we are applying to get the span values for corresponding stock prices by finding the algorithm's time complexity and space complexity using in Method # 1. Time Complexity of Method # 1 - For finding the time complexity, we need to observe the algorithm and analyze the time taken by a particular line for execution. We can observe that we require traversing the stock price array nested one loop in another loop; one traversal of the loop for traversing the stock prices from 1 to n - 1 stock prices, and the second loop is for comparing the stock price from previous stock prices until we get the stock price greater than the current stock price, and simultaneously incrementing the values of Span for corresponding stock prices in span array, finally in this way we require nested loop traversing. Hence time complexity will be - T ( n ) = O ( n ).O ( n ) T ( n ) = O ( n2 ) Hence time complexity will be O ( n2 ), as we do the asymptotically rough idea that we require ' n2 ' time to solve the problem of ' n ' elements. Space Complexity of Method # 1 - To find space complexity, we need to observe the program and analyze the space required to store all the variables; as we notice the program, we will observe that for storing span values of corresponding ' n ' stock prices, we require an array of ' n ' variables to store ' n ' span values. S ( n ) = O ( n ) Hence the space complexity for above method # 1 will be O ( n ). Method # 2 By Using Stack, an efficient method - This method is very efficient compared to the previous Brute force method because the time complexity in the brute force approach is O ( n2 ) due to the nested loop traversal. Still, in this stacking method, time complexity will be O ( n ). We will see it further in the analysis of the algorithm. Time complexity is also less than the previous method and this method is also known as the linear time complexity method. Let us discuss the stock span problem using this method: As we have already seen, the working of the stock span problem is to find the number of stocks, which are less than or equal to the target stock. Thus, we called it finding the Span of that stock. Algorithm to implement Stack method to solve this problem - Step 1 - Take an array named ' Stockprice ' from a user of ' n ' elements; here, elements refer to the stock, and this array contains the corresponding prices of the stocks. Also, make another array named ' span ', which stores the span values for each of the corresponding stocks. Step 2 - Make a function named ' Calspan ', this function targets to calculate the Span or number of stocks whose prices are less than or equal to the current stock until we reach the value greater than the current value. Step 3 - Calspan function will calculate the Span for each of the stocks. Step 4 - From the main function, pass Stockprice array, number of elements, and an array named Span, which stores the values of Span, calculated in the Calspan function. Step 5 - In the Calspan function, initialize the value of Span [ 0 ] = 1, as we know that the first element of the stockprice array for day 1 must have a span value equal to 1 because no price is less than its value, but it is equal to itself hence its value always starts with one. Step 6 - After allocating span value 1 for the stock price of day 1, then for the next stock price for further days, add this corresponding list of Span for current stock price day if the stock price of the current day is greater than or equal to the previous stock prices, then push the index of that element into the Stack. Step 7 - Now for to calculate the span values for further days, we will use the concept of Stack, in which we would perform mainly two operations push and pop; push is used to push the data element into the Stack and pop is used to retrieve the data element out of the Stack. Step 8 - Initially, we check the stock price corresponding to the index on the top of the Stack. Step 9 - Compare the top stock price of the Stack with the stock price of the current day; if the current day stock price is greater or equal to the stock price of the top of the Stack, then pop this index out of stock. Step 10 - Repeat the step 9 for the next top of the Stack until you reach the state for which the stock price of the current day is smaller than the stock price of the top of the Stack. Step 11 - After that, calculate the span values of the corresponding stock prices by subtracting the index at the top of the Stack from the index of the current day. Step 12 - Finally, we will get the desired output in the result. Implementation of Stock Span Problem using Method # 2 in C++ Programming Language 
// C++ program using stock span problem-solving method using Stack to calculate stock span values
#include <iostream>
#include <stack>
using namespace std; 
// Fills array Span [ ] with span values
void calSpan ( int stockprice[] , int n , int Span[] )
{
    // Initially, Create a stack after then push the index of the first
 element
    stack<int> st ;
    st.push ( 0 ) ; 
    // Span value for the first element is always 1
    Span [ 0 ]  = 1 ; 
    // For Calculation of the span values of remaining days by linearly checking previous days
    for ( int i = 1 ; i < n ; i++ ) 
{
        // Pop out the elements from the stack 
until it becomes empty and top of stack is smaller than
 the current stockprice
        while ( !st.empty() && stockprice [ st.top() ] < stockprice [ i ] )
            st.pop() ; 
        // If stack becomes empty, then stockprice [ i ] is
        // greater than all the elements present on left of it ,
        // i.e., stockprice [ 0 ] , stockprice [ 1 ] , ..stockprice [ i - 1 ].  Else
        // stockprice [ i ] is greater than elements after
        // top of stack
        Span [ i ]  = ( st.empty() ) ? ( i + 1) : ( i - st.top() ) ; 
        // Push this element to stack
        st.push ( i ) ;
    }
}
int main()
{
    int stockprice [ 100 ] ;
    int n , i  ;
    cout << " Enter number of Stocks : " << endl ;
    cin >> n ;
    cout << " Enter prices of corresponding stocks: " << endl ;
    for ( i = 0 ; i < n ; i++ )
    {
    	cin >> stockprice [ i ]  ;
	}
    int Span [ n ] ; 
    // Fill the span values in array Span [ ]
    calSpan ( stockprice , n , Span ) ;
    cout << " Span values are as follows for corresponding stocks -> " << endl ;
    // print the calculated span values
   for ( i = 0 ; i < n ; i++ )
        cout <<  Span [ i ] << endl ;
    return 0 ;
}
 The output of the following C++ program for solving the Stock span problem using Method # 2 Implementation of Stock Span Problem using Method # 2 in Java Programming Language 
// Java program for stock span problem-solving method using Stack to calculate stock span values
import java.util.* ;  
class Array 
{  
// Fills array Span [ ] with span values
static void calSpan ( int [] stockprice , int n , int [] Span )
{
      // Initially, Create a stack after then push the index of the first element       
Stack<Integer> st = new Stack<>() ;
        st.push ( 0 ) ;
        // Span value for the first element is always 1
        Span [ 0 ] = 1 ; 
         // For Calculation of the span values of remaining days by linearly checking previous days
        for (int i = 1; i < n; i++)
	{
             // Pop out the elements from the stack 
until it becomes empty and top of stack is smaller than
 the current stockprice
            while (!st.empty() && stockprice [ st.peek() ] <= stockprice [ i ] )
                st.pop(); 
            // If stack becomes empty, then stockprice [ i ] is
        // greater than all the elements present on left of it ,
        // i.e., stockprice [ 0 ] , stockprice [ 1 ] , ..stockprice [ i - 1 ].  Else
        // stockprice [ i ]
 is greater than elements after
        // top of stack
            Span [ i ] = ( st.empty() ) ? ( i + 1) : ( i - st.peek() ) ;
 
            // Push this element to stack
            st.push ( i ) ;
             }
}
public static void main ( String args[] )  
{  
 int n ;
 Scanner sc = new Scanner ( System.in ) ;
 System.out.println ( " Enter number of Stocks :  " ) ;
 n = sc.nextInt() ;
 int [] stockprice = new int[ 100 ] ;
 int [] span = new int [ 100 ] ;
 System.out.println ( " Enter prices of corresponding stocks: \n  " ) ;
 for ( int i = 0 ; i < n ; i++ )
 {
	 stockprice[ i ] = sc.nextInt() ;
 }
 // Fill the span values in array Span [ ]
 calSpan ( stockprice , n , span ) ;
 System.out.println ( " Span values are as follows for corresponding stocks -> \n " ) ;
 // print the calculated span values
  for ( int i = 0 ; i < n ; i++ )
 {
	 System.out.println ( span [ i ] ) ;
 }
}  
}
 The output of the following Java program for solving the Stock span problem using Method # 2 Implementation of Stock Span Problem using Method # 2 in Python Programming Language 
# Python program for stock span problem-solving method using Stack to calculate stock span values
# A stack-based efficient method to calculate span values for corresponding stock prices
def calSpan(stockprice, Span):     
    n = len(stockprice)
    # Initially, Create a stack after then pushing the index of the first element
    st = []
    st.append(0) 
    # Span value for the first element is always 1
    Span[0] = 1 
    # For Calculation of the span values of remaining days by linearly checking previous days
    for i in range(1, n):         
        # Pop out the elements from the Stack until it is not
        # empty and the top of stack is smaller than the current stockprice
        while( len(st) > 0 and stockprice[st[-1]] <= stockprice[i]):
            st.pop() 
        # If stack becomes empty, then stockprice [ i ] is greater
 than all elements on left of it, i.e. stockprice [ 0 ] ,
        # stockprice [ 1 ] , ..stockprice [ i - 1 ]. Else the stockprice [ i ] is
        # greater than elements after top of stack
        Span[i] = i + 1 if len(st) <= 0 else (i - st[-1])
 
        # Push this element to stack
        st.append(i)
# Program to test above function   
print("Enter number of an stock prices: ")
n=int(input())
print("Enter prices of corresponding stocks: \n ")
i=0
stockprice=[]
Span=[None] * n
while(i<n):
  ele = int(input())
  stockprice.append(ele)
  i=i+1
calSpan(stockprice,Span)
print("Span values are as follows for corresponding stocks -> \n ")
j=0
for j in Span:
  print(j)
 The output of the following Python program for solving the Stock span problem using Method # 2 Implementation of Stock Span Problem using Method # 2 in C# Programming Language 
// C# program for stock span problem-solving method using Stack to calculate stock span values
using System ;
using System.collections ;
class StockProblem {
    // a linear time solution for
    // stock span problem using a stack
    // based on an efficient method to calculate
    // stock span values
    static void calSpan(int[] stockprice , int n , int[] Span)
    {
        // Create a stack and Push
        // index of first element to it
        Stack st = new Stack() ;
        st.Push(0) ; 
        // Span value of first
        // element is always 1
        Span[0] = 1 ; 
        // Calculate span values
        // for rest of the elements
        for (int i = 1 ; i < n ; i++) { 
            // Pop elements from stack
            // while stack is not empty
            // and top of stack is smaller
            // than stockprice [ i ]
            while (st.Count > 0 && stockprice[(int)st.Peek()] <= stockprice[i])
                st.Pop() ; 
            // If stack becomes empty, then stockprice [ i ] is
            // always greater than all elements present on the left of it, i.e.,
            // stockprice [ 0 ] , stockprice [ 1 ] , ..stockprice [ i - 1 ]. Else stockprice [ i ]
            // is greater than the elements after top of stack
            Span[i] = (st.Count == 0) ? (i + 1) : (i - (int)st.Peek()); 
            // Push this element to stack
            st.Push(i);
        }
    } 
    // A function used to print elements of array
    static void print(int[] Span)
    {
        for (int i = 0 ; i < Span.Length ; i++)
            Console.Write(Span[i] + " ") ;
    } 
    // Main method
    public static void Main(String[] args)
    {
        int[] stockprice = { 80, 40, 60, 90, 120, 180 } ;
        int n = stockprice.Length ;
        int[] Span = new int[n] ; 
        // Fill the span values in array Span [ ]
        calSpan(stockprice , n , Span) ; 
        // print the calculated span values
        print(Span) ;
    }
}
 The output of the following C# program for solving the Stock span problem using Method # 2  1   1    2    4    5    6   
 After executing the program successfully in a specific programming language and following the Brute force algorithm using the nested traversal approach, we will get the proper result, i.e., finding out the span values for given stock prices daily. Now let us analyze the running time and performance of the algorithm we are applying to get the span values for corresponding stock prices by finding the algorithm's time complexity and space complexity using in Method # 2. Time Complexity of Method # 2 - For finding the time complexity, we need to observe the algorithm and analyze the time taken by a particular line for execution. We can observe that we require traversing the stock price array using one loop only; traversal of the loop for traversing the stock prices from 1 to n - 1 stock prices, and inside that loop, we are using a stack data structure to hold the span values and for doing comparisons among these stock prices of different days. Hence time complexity will be - T ( n ) = O ( n ) + C Here, ' C ' be any constant. T ( n ) = O ( n ) Hence time complexity will be O ( n ), as we do the asymptotically rough idea that we require ' n ' time to solve the problem of ' n ' elements. Space Complexity of Method # 2 - To find space complexity, we need to observe the program and analyze the space required to store all the variables; as we notice the program, we will observe that for storing span values of corresponding ' n ' stock prices, we require an array of ' n ' variables to store ' n ' span values. S ( n ) = O ( n ) Hence the space complexity for above method # 2 will be O ( n ). Method # 3 By Using Multiple Stacks - The implementation of this method is quite different from the method 2. We will see it further in the analysis of the algorithm. Let us discuss the stock span problem using this method: As we have already seen, the working of the stock span problem is to find the number of stocks, which are less than or equal to the target stock. Thus, we called it finding the Span of that stock. Algorithm to implement Multiple Stack method to solve this problem - Step 1 - In this method, we will use two stacks for finding the span values of the corresponding stock price of particular days. Step 2 - Initially define the size of the stock prices so that it will remain constant throughout the program, and it will be easy to implement the logic. Step 3 - One Stack is used to store the actual stock prices, as we compare it with previous methods; in this place, we are using an array to store stock prices, but here it is replaced by a stack data structure. Step 4 - Another stack is used to store the Span values temporarily, and we also call this Stack a temporary Stack. Step 5 - Using the above two stacks, we will solve this problem using push and pop operations of Stack. The remaining procedure of comparison criteria will be the same as method 2 using a single Stack. Step 6 - At last, store the values of Span from stack 2 to an array named Span, and print the result. Step 7 - Finally, we will get the desired output in the result. Implementation of Stock Span Problem using Method # 3 in C Programming Language 
// C program for solving stock span problem using multiple stacks
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#define SIZE 6                //  size of stack you can change according to you from here
// change this char to int if
// you want to create stack of int
// rest all program will work same
typedef int mainstack;
typedef struct stack {
	mainstack input [ SIZE ] ;
	int top ;
} STACK ;
// Initialize the stack by setting top pointer = -1.
void initialiseStack ( STACK* s ) 
{ s->top = -1 ; }
// to check if Stack is full.
int Isfull ( STACK s )
{
	if ( s.top == SIZE - 1 ) 
{
		return ( 1 ) ;
	}
	return ( 0 ) ;
}
// to check if Stack is empty.
int Isempty ( STACK s )
{
	if ( s.top == -1 ) {
		return ( 1 ) ;
	}
	else {
		return ( 0 ) ;
	}
}
// to push elements into the Stack.
void push ( mainstack d, STACK* s )
{
	if ( !Isfull(*s) )
 {

		s->input[(s->top) + 1] = d ;
		s->top = s->top + 1 ;
	}
}
// to pop element from stack.
mainstack pop ( STACK* s )
{
	mainstack res ;
	if ( !Isempty(*s) ) {
		res = s->input[ s->top ] ;
		s->top = s->top - 1 ;
	}
	else {
	
		// ' \0 ' will be returned if
		// stack is empty and of
		// char type.
		if ( sizeof( mainstack ) == 1 )
			res = '\0' ;
		else
			// INT_MIN will be returned
			// if stack is empty
			// and of int type.
			res = INT_MIN;
	}
	return ( res ) ;
}
// main function.
int main()
{
	int stockprice[ 6 ] ;
	int i ;
	printf ( " Enter 6 stock prices: \n " ) ;
	for ( i = 0 ; i < 6 ; i++ )
	{
		scanf ( " %d " , &stockprice[ i ] ) ;
	}
	// span of each day will be stored in Span array.
	int span[ 6 ] = { 0 } ;
	// stack 's' will store stock the values of each
 day. 
// stack 'temp' is temporary stack
	STACK s , temp ;
	// setting top pointer to -1.
	initialiseStack( &s ) ;
	initialiseStack( &temp ) ;
	// count basically signifies span of
	// particular day.
	int count = 1 ;
	// since first day span is 1 only.
	span[ 0 ] = 1 ;
	push( stockprice[ 0 ] , &s ) ;
	// calculate the span values for the remaining days.
	for ( i = 1 ; i < 7 ; i++ ) {	
		// count here denoted as span of that particular day.
		count = 1 ;	
		// if current-day stock is larger than the previous day
 span
		//then it will be popped out into temp stack.
		// popping will be carried out till Span gets over
		// and count will be incremented .
		while ( !Isempty( s )
			&& s.input[ s.top ] <= stockprice[ i ] )
 {
			push( pop( &s ) , &temp ) ;
			count++ ;
		}		
		// now, one by one all stocks from temp will be
		// poped and pushed back to s.
		while ( !Isempty( temp ) ) 
{
			push( pop( &temp ) , &s ) ;
		}	
		// pushing current stock
		push( stockprice[ i ] , &s ) ;	
		// appending span of that particular
		// day into output array.
		span[ i ] = count ;
	}
	printf ( " Span values for corresponding stock prices are as follows: \n " ) ;
	for ( i = 0 ; i < 6 ; i++ )
		printf( " %d \n " , span[ i ] ) ;
}
 The output of the following C program for solving the Stock span problem using Method # 3 Now let us analyze the running time and performance of the algorithm we are applying to get the span values for corresponding stock prices by finding the algorithm's time complexity and space complexity using in M ethod # 3. Time Complexity of Method # 3 - For finding the time complexity, we need to observe the algorithm and analyze the time taken by a particular line for execution. We can observe that we require two stacks for executing this stock span problem, one Stack is needed to store the stock prices of corresponding days; and another stack is needed to store the temporary values of Span, calculated by further comparisons between the stock prices, and finally, we have store these span values in an array. Hence time complexity will be - T ( n ) = O ( n ) + C Here ' C ' be any constant. T ( n ) = O ( n ) Hence time complexity will be O ( n ), as we do the asymptotically rough idea that we require ' n ' time to solve the problem of ' n ' elements. Space Complexity of Method # 3 - To find space complexity, we need to observe the program and analyze the space required to store all the variables; as we notice the program, we will observe that for storing span values of corresponding ' n ' stock prices, we require an array of ' n ' variables to store ' n ' span values. S ( n ) = O ( n ) Hence the space complexity for above method # 3 will be O ( n ). Method # 4 Linear Complexity method, without using Stack - This method is very efficient compared to the previous Brute force method because the time complexity in the brute force approach is O ( n2 ) due to the nested loop traversal. Still, in this stacking method, time complexity will be O ( n ), this method is different from the above three methods, but the concept of finding span values remains the same for all the methods. We will see it further in the analysis of the algorithm, and it is very easy to implement to solve any problem, in a much more efficient way, whose performance is also better; hence this method is also known as the linear time complexity method. Let us discuss the stock span problem using this method: As we have already seen, the working of the stock span problem is to find the number of stocks, which are less than or equal to the target stock. Thus, we called it finding the Span of that stock. Algorithm to implement linear-complexity method without using Stack to solve this problem - Step 1 - Take an array named ' Stockprice ' from a user of ' n ' elements; here, elements refer to the stock, and this array contains the corresponding prices of the stocks. Also, make another array named ' span ', which stores the span values for each of the corresponding stocks. Step 2 - Make a function named ' Calspan ', this function targets to calculate the Span or number of stocks whose prices are less than or equal to the current stock until we reach the value greater than the current value. Step 3 - Calspan function will calculate the Span for each of the stocks. Step 4 - From the main function, pass Stockprice array, number of elements, and an array named Span, which stores the values of Span, calculated in the Calspan function. Step 5 - In the Calspan function, initialize the value of Span [ 0 ] = 1, as we know that the first element of the stockprice array for day 1 must have a span value equal to 1 because no price is less than its value, but it is equal to itself hence its value always starts with one. Step 6 - After allocating span value 1 for the stock price of day 1, then for the next stock price for further days, run a loop form i = 1 to ' n - 1 ' stock prices of corresponding days inside that loop initialize one count variable with 1. Step 7 - After that, run a while loop for the condition : while ( i - count ) >= 0 && stockprice[ i ] >= stockprice[ i - count ] ) { count = count + span [ i - count ] // if condition true } Step 8 - Outside the while loop and inside the for loop, finally set the Span [ i ] = count. Step 9 - At last, from the main function, print the span values. Step 10 - Finally, you will get the desired output as a result. Implementation of Stock Span Problem using Method # 4 in C Programming Language 
// C program for a linear time complexity method for stock span problem without using stack
#include <stdio.h>
void calSpan( int stockprice[], int n, int Span[] )
{
// Span value for the first element is always 1
Span[ 0 ] = 1 ;
int i ;
// For Calculation of the span values of remaining days by linearly checking previous days
for ( i = 1 ; i < n ; i++ ) 
{
int count = 1 ;
while ( ( i - count ) >= 0 && stockprice[ i ] >= stockprice[ i - count ] ) 
{
count = count + Span[ i - count ] ;
}
Span[ i ] = count ;
}
}
int main()
{
    int stockprice [ 100 ] ;
    int n , i  ;
    printf ( " Enter number of Stocks : \n " ) ;
    scanf ( "%d" , &n ) ;
    printf ( " Enter prices of corresponding stocks: \n " ) ;
    for ( i = 0 ; i < n ; i++ )
    {
    scanf ( "%d" , &stockprice [ i ] ) ;
    }
    int Span [ n ] ; 
    // Fill the span values in array Span[ ]
    calSpan ( stockprice , n , Span ) ;
   printf ( " Span values are as follows for corresponding stocks -> \n " ) ;
    // print the calculated span values
    for ( i = 0 ; i < n ; i++ )
        printf ( " %d \n ", Span [ i ] ) ;
    return 0 ;
}
 The output of the following C program for solving the Stock span problem using Method # 4 Implementation of Stock Span Problem using Method # 4 in C++ Programming Language 
// C++ program for a linear time complexity method for stock span problem without using stack
#include <iostream>
using namespace std;
void calSpan(int stockprice[], int n, int Span[])
{
	// Span value for the first element is always 1
Span[ 0 ] = 1 ;
int i ;
// For Calculation of the span values of remaining days by linearly checking previous days
for ( i = 1 ; i < n ; i++ ) 
{
int count = 1 ;
while ( ( i - count ) >= 0 && stockprice[ i ] >= stockprice[ i - count ] ) 
{
count = count + Span[ i - count ] ;
}
Span[ i ] = count ;
}
}
int main()
{
int stockprice [ 100 ] ;
    int n , i  ;
    cout << " Enter number of Stocks : " << endl ;
    cin >> n ;
    cout << " Enter prices of corresponding stocks: " << endl ;
    for ( i = 0 ; i < n ; i++ )
    {
    	cin >> stockprice [ i ]  ;
	}
    int Span [ n ] ; 
    // Fill the span values in array Span[ ]
    calSpan ( stockprice , n , Span ) ;
    cout << " Span values are as follows for corresponding stocks -> " << endl ;
    // print the calculated span values
   for ( i = 0 ; i < n ; i++ )
        cout <<  Span [ i ] << endl ;
    return 0 ;
}
 The output of the following C++ program for solving the Stock span problem using Method # 4 Implementation of Stock Span Problem using Method # 4 in Java Programming Language 
// Java program for a linear time complexity method for stock span problem without using Stack
import java.util.Scanner ;  
class Stockspan 
{  
// Fill the array Span[] with span values
static void calSpan ( int [] stockprice , int n , int [] Span )
{
	// Span value for the first element is always 1
Span[ 0 ] = 1 ;
int i ;
// For calculating the span values for next stockprices we will find it using loop linearly
for ( i = 1 ; i < n ; i++ ) 
{
int count = 1 ;
while ( ( i - count ) >= 0 && stockprice[ i ] >= stockprice[ i - count ] ) 
{
count = count + Span[ i - count ] ;
}
Span[ i ] = count ;
}
}
public static void main ( String args[] )  
{  
 int n ;
 Scanner sc = new Scanner ( System.in ) ;
 System.out.println ( " Enter number of Stocks :  " ) ;
 n = sc.nextInt() ;
 int [] stockprice = new int[ 100 ] ;
 int [] span = new int [ 100 ] ;
 System.out.println ( " Enter prices of corresponding stocks: \n  " ) ;
 for ( int i = 0 ; i < n ; i++ )
 {
	 stockprice[ i ] = sc.nextInt() ;
 }
 // Fill the span values in array Span[ ]
 calSpan ( stockprice , n , span ) ;
 System.out.println ( " Span values are as follows for corresponding stocks -> \n " ) ;
 // print the calculated span values
  for ( int i = 0 ; i < n ; i++ )
 {
	 System.out.println ( span [ i ] ) ;
 }
}  
}  
 The output of the following Java program for solving the Stock span problem using Method # 4 Implementation of Stock Span Problem using Method # 4 in Python Programming Language 
# Python program for a linear time complexity method for stock span problem without using Stack
# Fill the list Span [] with span values
def calSpan(stockprice, n, Span):     
    # Span value for the first day is always 1
    Span[0] = 1 
    # For calculating the span values for next stockprices 
        # we will find it using loop linearly
    for i in range(1, n):
        count = 1        
        while ((i - count) >= 0 and
              stockprice[i] >= stockprice[i - count]):
            count = count + Span[i - count]
        Span[i] = count                      
# Program to test above function   
print("Enter number of an stock prices: ")
n=int(input())
print("Enter prices of corresponding stocks: \n ")
i=0
stockprice=[]
Span=[None] * n
while(i<n):
  ele = int(input())
  stockprice.append(ele)
  i=i+1
calSpan(stockprice,n,Span)
print("Span values are as follows for corresponding stocks -> \n ")
j=0
for j in Span:
  print(j)
 The output of the following Python program for solving the Stock span problem using Method # 4 Implementation of Stock Span Problem using Method # 4 in C# Programming Language 
// C# program for a linear time complexity method for stock span problem without using Stack
using System ; 
class StockProblem { 
    // function used to calculate stock span values
    static void calSpan( int[] stockprice , int n , int[] Span )
    {
        // Span value for the first element is always 1
        Span[0] = 1; 
        // For calculating the span values for next stockprices 
        // we will find it using loop linearly
        for (int i = 1; i < n; i++) {
            int count = 1;
            while ((i - count) >= 0 && stockprice[i] >= stockprice[i - count]) {
                count = count + Span[i - count];
            }
            Span[i] = count;
        }
    }
    //  Function used to print the span values from array span[ ]
    static void print(int[] Span)
    {
        string output = string.Join(" ", Span);
        Console.WriteLine(output) ;
    } 
    public static void Main()
    {
        int[] stockprice = { 100, 40, 50, 300, 420, 80 } ;
        int n = stockprice.Length ;
        int[] Span = new int[n] ; 
        // Fill the span values in array Span[ ]
        calSpan(stockprice, n, Span) ; 
        // printing the calculated span values
        print(Span) ;
    }
}
 The output of the following C# program for solving the Stock span problem using Method # 4  1   1    2    4    5    1   
 After executing the program successfully in a specific programming language and following the linear complexity algorithm without using Stack, we will get the proper result, i.e., finding out the span values for given stock prices daily. Now let us analyze the running time and performance of the algorithm we are applying to get the span values for corresponding stock prices by finding the algorithm's time complexity and space complexity using in Method # 4. Time Complexity of Method # 4 - For finding the time complexity, we need to observe the algorithm and analyze the time taken by a particular line for execution. We can observe that we require traversing the stock price array using one loop; for traversal of the loop for traversing the stock prices from 1 to n - 1 stock prices, and while condition loop is for comparing the stock price from previous stock prices until we get the stock price greater than the current stock price, and simultaneously incrementing the values of Span for corresponding stock prices in span array, finally in this way we require nested loop traversing. Hence time complexity will be - T ( n ) = O ( n ) + C T ( n ) = O ( n ) Hence time complexity will be O ( n ), as we do the asymptotically rough idea that we require ' n ' time to solve the problem of ' n ' elements. Space Complexity of Method # 4 - To find space complexity, we need to observe the program and analyze the space required to store all the variables; as we notice the program, we will observe that for storing span values of corresponding ' n ' stock prices, we require an array of ' n ' variables to store ' n ' span values. S ( n ) = O ( n ) Hence the space complexity for above method # 4 will be O ( n ). Next Topic Implementation of Deque by Circular Array ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
