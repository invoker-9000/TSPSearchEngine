MongoDB $lte Operator - javatpoint ? SCROLL TO TOP Home MongoDB SQL PL/SQL MySQL PostgreSQL SQL Server Oracle SQLite Cassandra DBMS Python Java Aptitude Interview Q MongoDB Tutorial MongoDB Tutorial No SQL Databases Advantages over RDBMS MongoDB Data Types Install MongoDB MongoDB Data Modeling MongoDB Operators Query & Projection Operator MongoDB Update Operator Aggregation Pipeline Stages MongoDB limit() MongoDB sort() Query Modifiers Database Commands Aggregation Commands Geospatial Command Query & Write Operation Commands Query Plan Cache Commands Authentication Commands User Management Commands Role Management Commands Replication Commands Sharding Commands Session Commands Database Create Database Drop Database Collection Create Collection Drop Collection CRUD: Documents Insert Documents Update Documents Delete Documents Query Documents SQL to MongoDB Mapping MongoDB text search MongoDB Shell MongoDB Shell Shell Collection Methods Cursor Methods MongoDB Database Commands Query Plan Cache Methods User Management Methods Role Management Methods MongoDB Replication Methods Bulk Operation Methods Connection Methods Sharding Methods MongoDB Cloud MongoDB Stitch MongoDB Atlas MongoDB Cloud Manager MongoDB Ops Manager MongoDB Tools MongoDB Compass MongoDB BI connector Differences Cassandra vs MongoDB Couchdb vs MongoDB Redis vs MongoDB Connectivity Java MongoDB PHP MongoDB Python MongoDB Node.js MongoDB Misc MongoDB Upsert MongoDB $and Operator MongoDB $not Operator MongoDB $or Operator MongoDB $in Operator MongoDB $nor Operator MongoDB find() Method MongoDB $group operator MongoDB Regex MongoDB $exp Operator MongoDB $unwind operator MongoDB $abs Operator MongoDB $floor Operator MongoDB $ceil Operator MongoDB $log Operator MongoDB $mod Operator MongoDB $divide Operator MongoDB $multiply Operator MongoDB $pow Operator MongoDB $sqrt Operator MongoDB $subtract Operator MongoDB $trunc Operator MongoDB $round Operator MongoDB $ln Operator MongoDB $log10 Operator MongoDB $cmp Operator MongoDB $concat Operator MongoDB $nin Operator MongoDB $gt Operator MongoDB $gte Operator MongoDB $lt Operator MongoDB $eq Operator MongoDB $lte Operator MongoDB $ne Operator MongoDB $size Operator MongoDB $rename operator Interview Questions MongoDB Interview SQL Interview PL/SQL Interview next ? ? prev MongoDB $lte Operator What is the $lte operator in MongoDB? MongoDB provides a variety of comparison query operators. The $lte (less than equal to) operator is one of those operators. The $lte operator is used to select documents where the value of the field is less than or equal to (i.e. <=) the given value. You can use this operator in the update, find, like method as per your requirements. Syntax of the $lte operator: 
{ field : { $lte : value } }
 Examples: In the following examples, we are working with: 
Database: JavaTpoint
Collection: employee
Document: Six documents that contain the details of the employees.
 >db.employee.find()
        {
                "_id" : 1,
                "name" : "John",
                "father_name" : "Thomas",
                "department" : "Contain Writting",
                "experience" : 2,
                "mobile_no" : 9856321478,
                "gender" : "Male",
                "salary" : 22000,
                "age" : 26
        }
        {
                "_id" : 2,
                "name" : "William",
                "father_name" : "Rebort",
                "department" : "Softwre Tester",
                "experience" : 1,
                "mobile_no" : 7896541478,
                "gender" : "Male",
                "salary" : 20000,
                "age" : 21
        }
        {
                "_id" : 3,
                "name" : "Ava",
                "father_name" : "William",
                "department" : "Marketing manager",
                "experience" : 5,
                "mobile_no" : 8789654178,
                "gender" : "Female",
                "salary" : 36500,
                "age" : 25 
        }
        {
                "_id" : 4,
                "name" : "Olivia",
                "father_name" : "Noah",
                "department" : null,
                "experience" : 4,
                "mobile_no" : 9045641478,
                "gender" : "Female",
                "salary" : 30000,
                "age" : 27 
        }
        {
                "_id" : 5,
                "name" : "Elijah",
                "father_name" : "John",
                "department" : "HR",
                "experience" : 0,
                "mobile_no" : 6589741230,
                "gender" : "Male",
                "salary" : 15000,
                "age" : 20
        }
        {
                "_id" : 6,
                "name" : "John",
                "father_name" : "Liam",
                "department" : "Softwre Tester",
                "experience" : 10,
                "mobile_no" : 9014536987,
                "gender" : "Male",
                "salary" : 55000,
                "age" : 30 
        }
 Example 1: Using $lte operator In this example, we are looking for documents whose salary scale is equal to or less than 30000. 
>db.employee.find({ salary : { $lte : 30000 }}).pretty()
 Output: {
    "_id" : 1,
    "name" : "John",
    "father_name" : "Thomas",
    "department" : "Contain Writting",
    "experience" : 2,
    "mobile_no" : 9856321478,
    "gender" : "Male",
    "salary" : 22000,
    "age" : 26
}
{
    "_id" : 2,
    "name" : "William",
    "father_name" : "Rebort",
    "department" : "Softwre Tester",
    "experience" : 1,
    "mobile_no" : 7896541478,
    "gender" : "Male",
    "salary" : 20000,
    "age" : 21
}
{
    "_id" : 4,
    "name" : "Olivia",
    "father_name" : "Noah",
    "department" : null,
    "experience" : 4,
    "mobile_no" : 9045641478,
    "gender" : "Female",
    "salary" : 30000,
    "age" : 27 
}
{
    "_id" : 5,
    "name" : "Elijah",
    "father_name" : "John",
    "department" : "HR",
    "experience" : 0,
    "mobile_no" : 6589741230,
    "gender" : "Male",
    "salary" : 15000,
    "age" : 20
}
 Example 2: Another field In this example, we're looking for documents whose age is less than or equal to 26. 
>db.employee.find({ age : { $lte : 26 }}).pretty()
 Output: {
    "_id" : 1,
    "name" : "John",
    "father_name" : "Thomas",
    "department" : "Contain Writting",
    "experience" : 2,
    "mobile_no" : 9856321478,
    "gender" : "Male",
    "salary" : 22000,
    "age" : 26
}
{
    "_id" : 2,
    "name" : "William",
    "father_name" : "Rebort",
    "department" : "Softwre Tester",
    "experience" : 1,
    "mobile_no" : 7896541478,
    "gender" : "Male",
    "salary" : 20000,
    "age" : 21
}
{
    "_id" : 3,
    "name" : "Ava",
    "father_name" : "William",
    "department" : "Marketing manager",
    "experience" : 5,
    "mobile_no" : 8789654178,
    "gender" : "Female",
    "salary" : 36500,
    "age" : 25 
}
{
    "_id" : 5,
    "name" : "Elijah",
    "father_name" : "John",
    "department" : "HR",
    "experience" : 0,
    "mobile_no" : 6589741230,
    "gender" : "Male",
    "salary" : 15000,
    "age" : 20
}
 Example 3: Update the value using the $lte operator In this example, we're updating the salary field for employees who have less than or equal to 3 years of work experience. 
>db.employee.update({experience : {$lte : 3}}, {$set : {salary : 20000}})
 Output: {
    "_id" : 1,
    "name" : "John",
    "father_name" : "Thomas",
    "department" : "Contain Writting",
    "experience" : 2,
    "mobile_no" : 9856321478,
    "gender" : "Male",
    "salary" : 20000,
    "age" : 26
}
{
    "_id" : 2,
    "name" : "William",
    "father_name" : "Rebort",
    "department" : "Softwre Tester",
    "experience" : 1,
    "mobile_no" : 7896541478,
    "gender" : "Male",
    "salary" : 20000,
    "age" : 21
}
{
    "_id" : 5,
    "name" : "Elijah",
    "father_name" : "John",
    "department" : "HR",
    "experience" : 0,
    "mobile_no" : 6589741230,
    "gender" : "Male",
    "salary" : 20000,
    "age" : 20
}
 Next Topic MongoDB $ne Operator ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
