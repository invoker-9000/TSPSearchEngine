Canonical Name Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Training Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Canonical Name Java What is the canonical name? The canonical name is nothing but the standard form of a name. In Java, the canonical name is the class name along with the package name. It is usually used in the import statement. For example, java.lang.Character is the canonical name for the Character class. When the javac compiler has a complete view of a classpath, it enforces the uniqueness of canonical names within it by clashing fully qualified class and package names at compile time. Note that the canonical name of the class is not the same as a fully qualified name. There is a slight difference between them. For every primitive type, named package, top-level class, and top-level interface, the canonical name is the same as the fully qualified name. Beside this, each member class, member interface, and array type may have a canonical name: A member class or member interface(M) declared in another class or interface (C) has a canonical name if and only if C has a canonical name. In such a case, the canonical name of the member class or member interface consists of the canonical name of another class or interface, followed by the dot(.), and the simple name of the member class or member interface. An array type may also have a canonical name if and only if its component type has a canonical name. In such a case, the canonical name of the array type consists of the canonical name of the component type of the array type followed by "[]". How to get a canonical name for a Java class? The Java Class class provides three different methods to get the class name. getSimpleName():It returns the class name without the package name. getName(): It returns the name of the class with the full package name in front. getCanonicalName(): It returns the canonical name of the class. Class.getCanonicalName() Method The method returns the canonical name for a specified class. It returns null if the class does not have any canonical name. Syntax: 
public String getCanonicalName()
 Let's see a Java program that finds the canonical name of a class. CanonicalName.java 
import java.lang.*;
public class CanonicalName
{
public static void main(String args[]) 
{
CanonicalName obj = new CanonicalName();
Class c = obj.getClass();
System.out.println("The canonical name of the Class is: " + c.getCanonicalName());
}
}
 Output: The canonical name of the Class is: CanonicalName
 Similarities Between Canonical Name and Fully Qualified Name A local class does not have a fully qualified name and canonical name. Every primitive type, named package, top-level class, and top-level interface has a fully qualified name and canonical name. Each member class, member interface, and array type may have a fully qualified name. For example, the fully qualified name of the type array of double is double[]. Difference Between Canonical Name and Fully Qualified Name The following code snippet clearly differentiates between the canonical name and fully qualified name. 
package p1;
class A
{
class B
{
}
}
class C extends A
{
}
 Both p1.A.B and p1.C.B are fully qualified names that represent the member class B. But only p1.A.B is its canonical name. Next Topic Method Chaining in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
