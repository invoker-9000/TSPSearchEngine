How to Create Zip File in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Training Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev How to Create Zip File in Java? In Java, working with zip file is not the same as working with word file or text file. In the context of zip file Java provides different ways to create zip or compressed or archive file. In this section, we will learn how to create zip file in Java. The necessary classes and interfaces that are required to create a zip file are defined in java.util.zip package. The package does not only provide classes for ZIP format but also provides classes for the GZIP format. The package also provides the classes to read from and write to the zip file. Using java.util.Zip Package Before creating the Java program, first we need to download the apache common compress JAR file. Now create a Java project and add this JAR file to the project. Copy the following Java program and paste it in the class file that you have created. CreateZipFile1.java 
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
public class CreateZipFile1
{
  static final int BUFFER = 1024;
  public static void main(String args[]) 
  {
//constructor of the ZipFile
   zipFile();
  }
  //method that create zip file
  private static void zipFile()
  {
    ZipOutputStream zos = null;
    BufferedInputStream bis = null;
    try
    {
      //path of the file that we want to compress
      String fileName = "C:\\Users\\Anubhav\\Desktop\\file1.txt";
      File file = new File(fileName);
      FileInputStream fis = new FileInputStream(file);
      bis = new BufferedInputStream(fis, BUFFER);      
      //creating ZipOutputStream
      //creates a zip file with the specified name
      FileOutputStream fos = new FileOutputStream("C:\\Users\\Anubhav\\Desktop\\demo.zip");
//ZipOutputStream writes data to an output stream in zip format
      zos = new ZipOutputStream(fos);                     
      // ZipEntry, here file name can be created using the source file
      ZipEntry ze = new ZipEntry(file.getName());
      //putting zipentry in zipoutputstream
      zos.putNextEntry(ze);
      byte data[] = new byte[BUFFER];
      int count;
      while((count = bis.read(data, 0, BUFFER)) != -1) 
      {
        zos.write(data, 0, count);
      }
    }
    catch(IOException ioExp)
    {
      System.out.println("Error while zipping " + ioExp.getMessage());
    }
    finally
    {
      if(zos != null)
      {
        try 
        {
        	//closing output stream
          zos.close();
        } 
        catch (IOException e) 
        {
          e.printStackTrace();
        }
      }
      if(bis != null)
      {
        try 
        {
        	//closing buffered input stream
          bis.close();
        } 
        catch (IOException e) 
        {
        //prints exception
          e.printStackTrace();
        }
      }
    }
  }
}
 Let's compile and run the above program. Output: We observe that a zip file with the specified name is created. Let's open the zip file and see the specified file added to zip file or not. Zipping Multiple Files ZippingMultipleFiles.java 
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
public class ZippingMultipleFiles 
{
  public static void main(String[] args) 
  {
    try 
    {
      //Source files
    String fileName1 = "C:\\Users\\Anubhav\\Desktop\\file1.txt";
      String fileName2 = "C:\\Users\\Anubhav\\Desktop\\file2.txt";
      //Zipped file
      String zipFilename = "C:\\Users\\Anubhav\\Desktop\\Allfiles.zip";
      File zipFile = new File(zipFilename);
      FileOutputStream fos  = new FileOutputStream(zipFile);            
      ZipOutputStream zos = new ZipOutputStream(fos);
      zipFile(fileName1, zos);
      zipFile(fileName2, zos);
      zos.close();
    } 
    catch (IOException e) 
    {
      e.printStackTrace();
    }
  }
  // Method to zip file
  private static void zipFile(String fileName, ZipOutputStream zos) throws IOException
  {
    final int BUFFER = 1024;
    BufferedInputStream bis = null;
    try
    {
      File file = new File(fileName);
      FileInputStream fis = new FileInputStream(file);
      bis = new BufferedInputStream(fis, BUFFER);          

      // ZipEntry --- Here file name can be created using the source file
      ZipEntry zipEntry = new ZipEntry(file.getName());        
      zos.putNextEntry(zipEntry);
      byte data[] = new byte[BUFFER];
      int count;
      while((count = bis.read(data, 0, BUFFER)) != -1) 
      {
        zos.write(data, 0, count);
      }  
      // close entry every time
      zos.closeEntry();
    } 
    finally
    {
      try 
      {
        bis.close();
      } 
      catch (IOException e) 
      {
        e.printStackTrace();
      }  
    }
  }
}
 Output: Zipping a Directory Create a zip of a directory is a bit different form the above approach. Java provides two way to zip a directory: Use Files.walkFileTree() Method Read all files from the folder and add that files to list, then perform compression. Using Files.walkFileTree() The method walkFileTree() is presented since Java 7. It is defined in the Files class that resides in the nio.file package. It is used to reclusively zip the file. It makes code short and simple. The method walks over a file tree. Syntax: 
public static Path walkFileTree(Path start, FileVisitor<? super Path> visitor) throws IOException
 It accepts two parameters: start: It denotes the starting file. visitor: Th file visitor to invoke each file. The FileVisitor is an interface that acts as an argument for the method. To walk over a file tree, we need to implement a FileVisitor interface. It specifies the required behavior at key points in the traversal process that are: When a file is visited Before a directory is accessed After a directory is accessed When a failure occurs Let's implement the logic to create a zip file for a directory. ZippingDirectory.java 
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
public class ZippingDirectory 
{
  static final int BUFFER = 1024;
  // Source folder which has to be zipped
  static final String FOLDER = "C:\\Users\\Anubhav\\Desktop\\demo folder";
  List<File> fileList = new ArrayList<File>();
  public static void main(String[] args) 
  {    
    ZippingDirectory zf = new ZippingDirectory();
    // get list of files
    List<File> fileList = zf.getFileList(new File(FOLDER));
    //go through the list of files and zip them 
    zf.zipFiles(fileList);    
  }
    
  private void zipFiles(List<File> fileList)
  {
    try
    {
      // Creating ZipOutputStream - Using input name to create output name
      FileOutputStream fos = new FileOutputStream(FOLDER.concat(".zip"));
      ZipOutputStream zos = new ZipOutputStream(fos);
      // looping through all the files
      for(File file : fileList)
      {
        // To handle empty directory
        if(file.isDirectory())
        {
          // ZipEntry --- Here file name can be created using the source file
          ZipEntry ze = new ZipEntry(getFileName(file.toString())+"/");
          // Putting zipentry in zipoutputstream
          zos.putNextEntry(ze);
          zos.closeEntry();
        }
        else
        {
          FileInputStream fis = new FileInputStream(file);
          BufferedInputStream bis = new BufferedInputStream(fis, BUFFER);
          // ZipEntry --- Here file name can be created using the source file
          ZipEntry ze = new ZipEntry(getFileName(file.toString()));
          // Putting zipentry in zipoutputstream
          zos.putNextEntry(ze);
          byte data[] = new byte[BUFFER];
          int count;
          while((count = bis.read(data, 0, BUFFER)) != -1) 
          {
              zos.write(data, 0, count);
          }
          bis.close();
          zos.closeEntry();
        }               
      }                
      zos.close();    
    }
    catch(IOException ioExp)
    {
      System.out.println("Error while zipping " + ioExp.getMessage());
      ioExp.printStackTrace();
    }
  }
    
 //the method returns a list of files
  private List<File> getFileList(File source)
  {      
    if(source.isFile())
    {
      fileList.add(source);
    }
    else if(source.isDirectory())
    {
      String[] subList = source.list();
      // this condition checks for empty directory
      if(subList.length == 0)
      {
        //System.out.println("path -- " + source.getAbsolutePath());
        fileList.add(new File(source.getAbsolutePath()));
      }
      for(String child : subList)
      {
        getFileList(new File(source, child));
      }
    }
    return fileList;
  }
    
  private String getFileName(String filePath)
  {
    String name = filePath.substring(FOLDER.length() + 1, filePath.length());
    //System.out.println(" name " + name);
    return name;      
  }
}
 Output: Next Topic Java Dot Operator ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
