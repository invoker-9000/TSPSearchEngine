What is Processor Affinity - javatpoint ? SCROLL TO TOP Home OS C Java PHP HTML CSS Bootstrap JavaScript jQuery jQuery UI Quiz Projects Interview Q Comment Forum Training OS Tutorial OS Tutorial Types of OS Process Management Introduction Attributes of a Process Process States Process Schedulers Process Queues Times Related to Process CPU Scheduling Scheduling Algorithms FCFS Scheduling Convoy Effect in FCFS FCFS with overhead SJF Scheduling Burst Time Prediction SRTF scheduling SRTF GATE 2011 Example Round Robin Scheduling RR scheduling Example HRRN Scheduling HRNN Example Priority Scheduling Non Preemptive Priority Preemptive Priority SRTF:IO bound processes Synchronization Introduction Critical Section Problem Lock Variable Mechanism TSL Mechanism Priority Inversion in TSL Turn Variable Interested Variable Paterson Solution Without Busy Waiting Sleep and Wake Semaphore Introduction Counting Semaphore Problem on counting semaphore Binary Semaphore Deadlocks Introduction strategies Handling Deadlock Prevention Deadlock Avoidance Resource Allocation Graph Detection using RAG Detection and Recovery Memory Management Introduction Fixed Partitioning Dynamic Partitioning Compaction Bit Map for Dynamic Partitioning Linked List for Dynamic Partitioning Partitioning Algorithms GATE on Best Fit & First Fit Need for Paging Paging with Example Binary Addresses Physical & Logical Address Page Table Mapping from page table Page Table Entry Page Table Size Finding Optimal Page Size Virtual Memory Look aside Buffer GATE question on TLB Demand Paging Inverted Page Table Page Replacement Gate on LRU and FIFO Numerical on LRU, FIFO Beladys Anamoly Segmentation Paging VS Segmentation Segmented Paging File Management Attributes of the File Operations on the File File Access Methods Directory Structure Single level Directory Two level Directory Tree structured Directory Acyclic Graph Directories File System File System Structure Master Boot Record On Disk Data Structures In memory Data structures Directory Implementation Allocation Methods Contiguous Allocation Linked List Allocation File Allocation Table Indexed Allocation Linked Index Allocation Inode Free space Management Disk Scheduling FCFS Scheduling SSTF Scheduling SCAN and C-SCAN Look and C-Look Numerical on SSTF Numerical on Disk Misc Functions of OS Mobile OS Swapping in OS Threads in OS Fedora Operating System Uses of Operating System Producer-Consumer problem Dining Philosophers Problem Readers Writers Problem History Of OS Banker's Algorithm in OS What is the context switching in the operating system Internal vs. External Fragmentation Multiprocessing Operating system Multiprogramming vs Multitasking Network Operating System Latest Operating System System Calls in Operating System Multitasking Operating System Distributed Operating System Fragmentation in Operating System Multithreading Models in Operating system Operating system services Batch Operating System Embedded Operating System Time-Sharing vs Real-Time Operating System Multi-User Operating System Memory Management Monolithic Structure of Operating System MS-DOS Operating System Spooling in Operating System Network Operating System vs Distributed Operating System Operating system vs Application software System Software vs Operating System Real-Time operating system Booting in Operating System Layered Structure of Operating System Multiprogramming vs. Time Sharing Operating System Distributed File System Multiprogramming Operating System Server Operating System 32 bit vs 64 bit Operating System Single User Operating System Process vs Program Operating System Security Components of Operating System GUI Operating System Android Operating System Buffering in Operating System Device Driver in Operating System Best Operating System for Hacking Clustered Operating System Android vs Windows OS Scheduler vs Dispatcher Deadlock vs Starvation Semaphore vs Monitor Boot Block and Bad Block in Operating System Hard and Soft Real-Time Operating System Concurrency in Operating System Microkernel in Operating System Protection in Operating System Benefits of Multithreading Host vs Guest Operating System Livelock in Operating System Dual Mode Operations in Operating System What is Access Token in Operating System Deadlock Detection in Distributed Systems CUI vs GUI Monolithic vs layered Operating System Mutex vs Semaphore What is Interleaved Memory Trap vs Interrupt in Operating System Open-Source Operating System Multiple Processors Scheduling in Operating System Starvation and Aging in Operating Systems Best Android Operating System for PC Device Management in Operating System Disk Controller in Operating System Views of Operating System Tasks in Real-Time Systems What is RPC in Operating System C-SCAN vs SSTF Disk Scheduling Algorithm Look vs C-Look Disk Scheduling Algorithm SCAN vs C-SCAN Disk Scheduling Algorithm SCAN vs FCFS Disk Scheduling Algorithm Lamport's Bakery Algorithm Basic Disk vs Dynamic Disk What is Zombie Process FCFS vs SSTF Disk Scheduling Algorithm LRU vs LFU Page Replacement Algorithm SSTF vs C-LOOK Disk Scheduling Algorithm C-LOOK vs C-SCAN Disk Scheduling Algorithm Rotational Latency vs Disk Access Time in Disk Scheduling SSTF vs LOOK Disk Scheduling Algorithm Virtual vs Physical Address Address binding in Operating System Preemptive vs Non-Preemptive Scheduling Properties of Operating System What is Processor Affinity MCQ Operating System MCQ OS MCQ Part-2 next ? ? prev What is Processor Affinity? Processor Affinity refers to a process with an affinity for the processor on which it is currently running. When a process executes on a specific CPU, the cache memory is affected. The processor's cache is populated by the process's most recently accessed data, so successive memory accesses are commonly satisfied in the cache memory. Assume the process is moved to a different CPU. In that situation, the contents of the first processor's cache memory must be invalidated, and the second processor's cache must be repopulated. Most symmetric multiprocessing (SMP) systems try to avoid process migration by keeping the same process running on the same processor due to the cause invalidating and repopulating caches is expensive. Processor affinity is also known as "cache affinity". It can bind and unbind a process or a thread to a CPU or a group of CPUs and ensure that the process or thread executes only on the designated CPU and not on any other CPU. It is a modification of the symmetric multiprocessing OS's native central queue scheduling algorithm. Every item in the queue does have a tag that specifies its kin processor. When it comes to resource allocation, each task is assigned to its kin processor before others. Processor affinity makes use of the fact that leftovers of a process that ran on a certain processor can persist in that processor's state after another process has run on it. Scheduling a CPU-intensive process with few interrupts to run on the same processor might improve performance by decreasing degrading events like cache misses. However, it may slow down other programs as they must wait for that processor to become available again. Using many examples of a non-threaded application like graphics-rendering software is a real instance of processor affinity. Implementations of scheduling algorithms differ in their adherence to processor affinity. Some implementations will enable a task to switch to another processor if it improves efficiency under certain conditions. For example, if two processor-intensive processes (A and B) have an affinity to one processor and another remains unused, many schedulers would shift job B to the second processor to maximize the CPU use. Task B will develop an affinity for the second processor, whereas Task A will retain affinity for the original processor. What is the use of Processor Affinity? Processor affinity can effectively decrease cache issues, but it does not resolve the persistent load-balancing issue. For instance, a system with two dual-core hyper-threaded CPUs provides a difficult task to a scheduling algorithm. Hyper-threading creates a perfect affinity between two virtual CPUs running on the same core. There is some affinity among two cores on the same physical processor but no affinity among different physical processors. As other resources are shared, processor affinity alone may not be used to dispatch CPUs. Suppose a process has been executed on a virtual hyper-threaded CPU on a given core, and the virtual CPU is currently busy, and the CPU is not its partner. In this situation, the cache affinity suggests that the process be dispatched to the idle companion processor. Although, the two virtual processors compete for almost all compute, memory resources, and cache memory. If only one processor is available, it is usually more effective to route the process to a separate core or processor. It may incur a performance penalty when the process repopulates the cache but may improve overall performance because it will not have to compete for CPU resources. Types of Processor Affinity There are mainly two types of processor affinity. These are as follows: Soft Affinity Hard Affinity Soft Affinity The term "soft affinity" refers to an operating system's policy of keeping a process running on the same processor, and it will not ensure that it will do so. Hard Affinity It enables a process to define a subset of processors on which it may execute. Some operating systems like Linux implement soft affinity and offer system calls, such as sched setaffinity(), that support hard affinity. Next Topic # ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
