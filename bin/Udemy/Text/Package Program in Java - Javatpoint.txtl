Package Program in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Training Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Package Program in Java In Java, a package is a group of classes, sub-packages, and interfaces. It supports organisation of existing classes into a folder structure, making them easier to find and utilise. More importantly, it promotes the reuse of code. Each package has its own name. The classes and interfaces are organised into a separate namespace, or name group. Interfaces and classes with the same name can't be found in the same package, although they can be found in distinct ones. It is accomplished by giving each Java package its own namespace. Create Package in Java Creating a package is a straightforward procedure as explained below: Choose the package's name. In Java Source File, include the package command as the first line of code. The source file includes the classes, interfaces, and other components of the package that we want to include. To generate Java packages, you must first compile them. Step 1: Consider the Java package application below: c1.java 
package p1;
class C1()
{
public void m1()
{
System.out.println("m1 of C1");
}
public static void main(string args[])
{
C1 obj = new C1();
obj.m1();
}
}
 Here, To place a class into a package, specify package p1 on the first line of code. Make a C1 class. Creating a method named m1 that prints a statement. Identifying the primary method. Create an object of the class C1. Method m1 is being called. Step 2: Save the file as a demo.java in the next step. Step 3: We compile the file in the new step. The compilation process is now complete. The C1 class file is generated. But why isn't a package created? The solution is in the next step. Step 4: Now we must create a package by using the following command. 
javac -d . demo.java
 The compiler is forced to construct a package using this command. The current working directory is represented by the "." operator. Step 5: Run the above code, it produces a package named p1 when we run it. The C1.class file may be found when we open the java package p1 within. Step 6: Use the following code to compile the same file. 
demo.java javac -d
 The parent directory is indicated by "..". In our example, the file will be stored in the C Drive's parent directory. When the preceding code is run, the file is stored in the parent directory. Step 7: Suppose, we want to establish a sub package p2 within our existing java package p1. Then we will make the necessary changes to our code. 
package p1.p2;
class C1
{
public void m1() 
{
System.out.println("m1 of C1");
}
}
 Step 8: Prepare the file for compilation. It generates a sub-package p2 with the class C1 inside the package p1. Step 9: To run the code, type the fully qualified name of the class, which is the package name followed by the sub-package name, then the class name. 
java p1.p2.C1 
 As explained in above steps the package is executed, and the output is "m1 of c1" from the code file. Importing a Package In order to construct an object of a class (bundled in a package), we must use its fully qualified name in your code. Example: 
java.awt.event.actionListner object = new java.awt.event.actionListner();
 However, typing the lengthy dot-separated package path name for each class we want to use might get laborious. It is advised that we use the import statement instead. Syntax 
import packageName;
 Once imported, we can use the class without mentioning its fully qualified name. 
import java.awt.event.*; // * signifies all classes in this package are imported
import javax.swing.JFrame // here only the JFrame class is imported
//Usage
JFrame f = new JFrame; // without fully qualified name.
 Example: To import package Step 1: Copy the code into an editor. 
package p3;
import p1.*; //imports classes only in package p1 and NOT  in the sub-package p2
class c3{
  public   void m3(){
     System.out.println("Method m3 of Class c3");
  }
  public static void main(String args[]){
    c1 obj1 = new c1();
    obj1.m1();
  }
}
 Step 2: Save the file as Demo2.java. Compile the file using the command javac -d . Demo2.java Step 3: Execute the code using the command java p3.c3 Packages - important notes: To avoid naming difficulties, packages are given names that are reversed versions of the company's domain name. For example, com.microsoft, com.infosys, When no package name is supplied, a class is placed in the default package (the current working directory), that has no name. As a result, we were able to complete assignments earlier. When writing a package, it's important to remember that the statement for constructing the package must come before any other import statements. 
// not allowed
import package p1.*;
package p3;
//correct syntax
package p3;
import package p1.*;
 The java.lang package is imported by default for any class that we create in Java. The Java API is quite comprehensive, with classes that can handle practically any programming activity we can think of, from data structure manipulation to networking. We will almost certainly use API files in our code. Next Topic Canonical Name Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
