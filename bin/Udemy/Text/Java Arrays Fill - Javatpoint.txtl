Java Arrays Fill - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Training Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Arrays Fill By using the Arrays.fill() method, we can either fill a complete array or can fill some part of it. Arrays.fill() method is also capable of filling both the 2D and the 3D Arrays. Arrays fill() method has the following syntax: 
Java.util.Arrays.fill(boolean[] arr, int fromIndex, int toIndex, boolean val )
 Here, The arr parameter defines an array to be filled. The formIndex parameter defines the index of the first element to be filled with the given value. The toIndex parameter defines the index of the last index to be filled with the given value. The val parameter defines the value to be stored in all elements of the given array. Let's take some examples to understand how we can use the Arrays.fill() method for filling array. Fill entire 1-D Array ArraysFillExample1.java 
// import required classes and packages
import java.util.Arrays;
import java.util.Scanner;  
// create ArraysFillExample1 to fill sub-array to given array
public class ArraysFillExample1
{
	//main() method start
    public static void main(String[] args)
    {
        int size, ele;  
		Scanner sc = new Scanner(System.in);  
		System.out.print("Enter the size of the array: ");  
		size = sc.nextInt();  
		//creates an array of size 100
		int[] array = new int[100];  
		System.out.println("Enter the elements in the array: ");  
		for(int i = 0; i < size; i++)  
		{  
			array[i] = sc.nextInt();  
		}
		System.out.print("Enter the element which you want to fill in the array: ");  
		ele = sc.nextInt();
        // fill complete array with ele
        Arrays.fill(array, ele);
		
        System.out.println("After filling" +ele+ " in complete array:\n" + Arrays.toString(array));
    }
}
 Output: Fill some part of 1-D Array ArraysFillExample2.java 
// import required classes and packages
import java.util.Arrays;
import java.util.Scanner;  
// create ArraysFillExample2 to fill some part of the array with the given value
public class ArraysFillExample2
{
	//main() method start
    public static void main(String[] args)
    {
        int size, ele, index1, index2;  
		Scanner sc = new Scanner(System.in);  
		System.out.print("Enter the size of the array: ");  
		size = sc.nextInt();  
		//creates an array of size 100
		int[] array = new int[100];  
		System.out.println("Enter the elements in the array: ");  
		for(int i = 0; i < size; i++)  
		{  
			array[i] = sc.nextInt();  
		}
		System.out.print("Enter the element which you want to fill in the array: ");  
		ele = sc.nextInt();
	System.out.print("From which index you want to fill "+ele+" in the array: ");  
		index1 = sc.nextInt();
		System.out.print("To which index you want to fill "+ele+" in the array: ");  
		index2 = sc.nextInt();
        // fill complete array with ele
        Arrays.fill(array, index1, index2, ele);
		
        System.out.println("After filling" +ele+ " in the array:\n" + Arrays.toString(array));
    }
}
 Output: Fill multidimensional array (2D Array) Just like a single-dimensional array, we can also fill the multidimensional array by using the Arrays.fill() method. In order to fill a multidimensional array, we use the for loop to fill each row of the multidimensional array. Let's take an example to understand how we can fill a multidimensional array using the Arrays.fill() method. ArraysFillExample3.java 
// import required classes and packages
package javaTpoint.MicrosoftJava;
import java.util.Arrays;
import java.util.Scanner;  
// create ArraysFillExample3 to fill the multidimensional array with the given value
public class ArraysFillExample3
{
	//main() method start
    public static void main(String[] args)
    {
        int ele;  
        // create scanner class object
        Scanner sc = new Scanner(System.in);  
		System.out.print("Enter the size of the array: \n");  
		System.out.print("Enter size of row : \n");
		int rows = sc.nextInt();
		System.out.print("Enter size of column : \n");
	    int columns = sc.nextInt();  
	    // create an array of size row*column
	    int twoDArray[][] = new int[rows][columns];
		System.out.println("Enter the elements in the array: \n");  
		for(int i = 0; i < rows; i++)
        {            
           for(int j = 0; j < columns; j++)
           {
        	   System.out.println("Enter element ["+i+"]["+j+"]");
        	   twoDArray[i][j] = sc.nextInt();
           }
}		
		System.out.print("Enter the element which you want to fill in the array: \n\n");  
		ele = sc.nextInt();
		System.out.println("Multi-dimensional array after inserting elements: \n\n");  
		System.out.println(Arrays.deepToString(twoDArray));
		// fill complete array with ele 
		for (int[] row : twoDArray)
            Arrays.fill(row, ele);
        System.out.println("After filling" +ele+ " in the array:\n\n" + Arrays.deepToString(twoDArray));
        sc.close();
    }
}
 Output: ArraysFillExample4.java 
// import required classes and packages
package javaTpoint.MicrosoftJava;
import java.util.Arrays;
import java.util.Scanner;  
// create ArraysFillExample4 to fill 3D array with the given value
public class ArraysFillExample4
{
	//main() method start
    public static void main(String[] args)
    {
        int ele;  
        // create scanner class object
        Scanner sc = new Scanner(System.in);  
		System.out.print("Enter the size of the array: \n");  
		System.out.print("x : ");
		int x = sc.nextInt();
		System.out.print("y : ");
	    int y = sc.nextInt();  
	    System.out.print("z : ");
	    int z = sc.nextInt(); 
	    // create an array of size row*column
	    int threeDArray[][][] = new int[x][y][z];
		System.out.println("Enter the elements in the array: ");  
		for(int i=0; i < threeDArray.length; i++){
			for(int j=0; j < threeDArray[i].length; j++){
				for(int k=0; k < threeDArray[i][j].length; k++){
					   System.out.println("Enter element ["+i+"]["+j+"]["+k+"]");
					   threeDArray[i][j][k] = sc.nextInt();
		        }
			}
		}
		System.out.print("Enter the element which you want to fill in the array: \n\n");  
		ele = sc.nextInt();
		System.out.println("3D array after inserting elements: \n\n");  
		System.out.println(Arrays.deepToString(threeDArray));
		// fill complete array with ele
		for (int[][] newRow : threeDArray) {
            for (int[] newRowColumn : newRow) {
                Arrays.fill(newRowColumn, ele);
            }
        }
        System.out.println("After filling" +ele+ " in the array:\n\n" + Arrays.deepToString(threeDArray));
        sc.close();
    }
}
 Output: Next Topic Java Font ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
