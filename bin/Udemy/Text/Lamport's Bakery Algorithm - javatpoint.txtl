Lamport's Bakery Algorithm - javatpoint ? SCROLL TO TOP Home OS C Java PHP HTML CSS Bootstrap JavaScript jQuery jQuery UI Quiz Projects Interview Q Comment Forum Training OS Tutorial OS Tutorial Types of OS Process Management Introduction Attributes of a Process Process States Process Schedulers Process Queues Times Related to Process CPU Scheduling Scheduling Algorithms FCFS Scheduling Convoy Effect in FCFS FCFS with overhead SJF Scheduling Burst Time Prediction SRTF scheduling SRTF GATE 2011 Example Round Robin Scheduling RR scheduling Example HRRN Scheduling HRNN Example Priority Scheduling Non Preemptive Priority Preemptive Priority SRTF:IO bound processes Synchronization Introduction Critical Section Problem Lock Variable Mechanism TSL Mechanism Priority Inversion in TSL Turn Variable Interested Variable Paterson Solution Without Busy Waiting Sleep and Wake Semaphore Introduction Counting Semaphore Problem on counting semaphore Binary Semaphore Deadlocks Introduction strategies Handling Deadlock Prevention Deadlock Avoidance Resource Allocation Graph Detection using RAG Detection and Recovery Memory Management Introduction Fixed Partitioning Dynamic Partitioning Compaction Bit Map for Dynamic Partitioning Linked List for Dynamic Partitioning Partitioning Algorithms GATE on Best Fit & First Fit Need for Paging Paging with Example Binary Addresses Physical & Logical Address Page Table Mapping from page table Page Table Entry Page Table Size Finding Optimal Page Size Virtual Memory Look aside Buffer GATE question on TLB Demand Paging Inverted Page Table Page Replacement Gate on LRU and FIFO Numerical on LRU, FIFO Beladys Anamoly Segmentation Paging VS Segmentation Segmented Paging File Management Attributes of the File Operations on the File File Access Methods Directory Structure Single level Directory Two level Directory Tree structured Directory Acyclic Graph Directories File System File System Structure Master Boot Record On Disk Data Structures In memory Data structures Directory Implementation Allocation Methods Contiguous Allocation Linked List Allocation File Allocation Table Indexed Allocation Linked Index Allocation Inode Free space Management Disk Scheduling FCFS Scheduling SSTF Scheduling SCAN and C-SCAN Look and C-Look Numerical on SSTF Numerical on Disk Misc Functions of OS Mobile OS Swapping in OS Threads in OS Fedora Operating System Uses of Operating System Producer-Consumer problem Dining Philosophers Problem Readers Writers Problem History Of OS Banker's Algorithm in OS What is the context switching in the operating system Internal vs. External Fragmentation Multiprocessing Operating system Multiprogramming vs Multitasking Network Operating System Latest Operating System System Calls in Operating System Multitasking Operating System Distributed Operating System Fragmentation in Operating System Multithreading Models in Operating system Operating system services Batch Operating System Embedded Operating System Time-Sharing vs Real-Time Operating System Multi-User Operating System Memory Management Monolithic Structure of Operating System MS-DOS Operating System Spooling in Operating System Network Operating System vs Distributed Operating System Operating system vs Application software System Software vs Operating System Real-Time operating system Booting in Operating System Layered Structure of Operating System Multiprogramming vs. Time Sharing Operating System Distributed File System Multiprogramming Operating System Server Operating System 32 bit vs 64 bit Operating System Single User Operating System Process vs Program Operating System Security Components of Operating System GUI Operating System Android Operating System Buffering in Operating System Device Driver in Operating System Best Operating System for Hacking Clustered Operating System Android vs Windows OS Scheduler vs Dispatcher Deadlock vs Starvation Semaphore vs Monitor Boot Block and Bad Block in Operating System Hard and Soft Real-Time Operating System Concurrency in Operating System Microkernel in Operating System Protection in Operating System Benefits of Multithreading Host vs Guest Operating System Livelock in Operating System Dual Mode Operations in Operating System What is Access Token in Operating System Deadlock Detection in Distributed Systems CUI vs GUI Monolithic vs layered Operating System Mutex vs Semaphore What is Interleaved Memory Trap vs Interrupt in Operating System Open-Source Operating System Multiple Processors Scheduling in Operating System Starvation and Aging in Operating Systems Best Android Operating System for PC Device Management in Operating System Disk Controller in Operating System Views of Operating System Tasks in Real-Time Systems What is RPC in Operating System C-SCAN vs SSTF Disk Scheduling Algorithm Look vs C-Look Disk Scheduling Algorithm SCAN vs C-SCAN Disk Scheduling Algorithm SCAN vs FCFS Disk Scheduling Algorithm Lamport's Bakery Algorithm Basic Disk vs Dynamic Disk What is Zombie Process FCFS vs SSTF Disk Scheduling Algorithm LRU vs LFU Page Replacement Algorithm SSTF vs C-LOOK Disk Scheduling Algorithm C-LOOK vs C-SCAN Disk Scheduling Algorithm Rotational Latency vs Disk Access Time in Disk Scheduling SSTF vs LOOK Disk Scheduling Algorithm Virtual vs Physical Address Address binding in Operating System Preemptive vs Non-Preemptive Scheduling Properties of Operating System What is Processor Affinity MCQ Operating System MCQ OS MCQ Part-2 next ? ? prev Lamport's Bakery Algorithm In this article, we will understand Lamport's bakery algorithm in detail. What do you mean by Lamport's bakery algorithm? Lamport proposed a bakery algorithm, a software solution, for the n process mutual exclusion problem. This algorithm solves a critical problem, following the fairest, first come, first serve principle. Why is it called the bakery algorithm? This algorithm is known as the bakery algorithm as this type of scheduling is adopted in bakeries where token numbers are issued to set the order of customers. When a customer enters a bakery store, he gets a unique token number on its entry. The global counter displays the number of customers currently being served, and all other customers must wait at that time. Once the baker finishes serving the current customer, the next number is displayed. The customer with the next token is now being served. Similarly, in Lamport's bakery algorithm, processes are treated as customers. In this, each process waiting to enter its critical section gets a token number, and the process with the lowest number enters the critical section. If two processes have the same token number, the process with a lower process ID enters its critical section. Algorithm of Lamport's bakery algorithm 
do
{
    entering[i] :=  true; // show interest in critical section
   // get a token number
    number[i] := 1 + max(number[0],  number[1], ..., number[n - 1]);   
    entering [i] :=  false;
    for ( j :=  0 ;  j<n; j++)
    {
 // busy wait until process Pj receives its token number
        while (entering [j])
        { ; } // do nothing
       while (number[j] !=  0 &&  (number[j], j) < (number[i], i)) // token comparison 
         { ; } // do nothing
       }
        // critical section
         number[i] :=  0;  // Exit section
        // remainder section
    } while(1);
 Structure of process Pi for Lamport's bakery algorithm to critical section problem. Explanation - This algorithm uses the following two Boolean variables. 
boolean entering[n];
int number[n];
 All entering variables are initialized to false, and n integer variables numbers are all initialized to 0. The value of integer variables is used to form token numbers. When a process wishes to enter a critical section, it chooses a greater token number than any earlier number. Consider a process Pi wishes to enter a critical section, it sets entering[i] to true to make other processes aware that it is choosing a token number. It then chooses a token number greater than those held by other processes and writes its token number. Then it sets entering[i] to false after reading them. Then It enters a loop to evaluate the status of other processes. It waits until some other process Pj is choosing its token number. Pi then waits until all processes with smaller token numbers or the same token number but with higher priority are served fast. When the process has finished with its critical section execution, it resets its number variable to 0. The Bakery algorithm meets all the requirements of the critical section problem. Mutual Exclusion: we know that when no process is executing in its critical section, a process with the lowest number is allowed to enter its critical section. Suppose two processes have the same token number. In that case, the process with the lower process ID among these is selected as the process ID of each process is distinct, so at a particular time, there will be only one process executing in its critical section. Thus the requirement of mutual Exclusion is met. Progress: After selecting a token, a waiting process checks whether any other waiting process has higher priority to enter its critical section. If there is no such process, P will immediately enter its critical section. Thus meeting progress requirements. Bounded Waiting: As awaiting, the process will enter its critical section when no other process is in its critical section and If its token number is the smallest among other waiting processes. If token numbers are the same, it has the lowest process ID among other waiting processes. Advantages of Lamport's bakery algorithm Lamport's bakery algorithms are free from starvation. Lamport's Bakery algorithm follows a FIFO. Lamport's Bakery algorithm works with atomic registers. Lamport's Bakery algorithm is one of the simplest known solutions to the mutual exclusion problem for the general case of the N process. This algorithm ensures the efficient use of shared resources in a multithreaded environment. Disadvantages of Lamport's bakery algorithm Lamport's bakery algorithm is unreliable as a failure of any one of the processes will halt progress. It has a high message complexity of 3(N - 1) messages per entry/exit into the critical section. Next Topic Basic Disk vs Dynamic Disk ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn Tutorials Learn Java Learn Data Structures Learn C Programming Learn C++ Tutorial Learn C# Tutorial Learn PHP Tutorial Learn HTML Tutorial Learn JavaScript Tutorial Learn jQuery Tutorial Learn Spring Tutorial Our Websites Javatpoint.com Hindi100.com Lyricsia.com Quoteperson.com Jobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935 Contact Us Subscribe Us Privacy Policy Sitemap About Me ? Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.
